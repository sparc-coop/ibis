@inherits RealtimeComponent

@if (SpillBackground)
{
    <div class="avatar-background-spill" style="background: @LocalUser.BackgroundColor"></div>
}

<figure class="avatar ibis-ignore @(HasEmoji ? "emoji" : "") @(EditTab != null ? "editable" : "") @(SpillBackground ? "no-background" : "")" @onclick=Edit>
    <svg viewBox="0 0 100 100" xmlns="http://www.w3.org/2000/svg" style="background: @LocalUser.BackgroundColor">
        <text x="50%" y="60%" font-size="70" text-anchor="middle" dominant-baseline="middle" style="fill: @LocalUser.ForegroundColor">
            @Emoji
        </text>
    </svg>
    <figcaption style="color: @LocalUser.ForegroundColor">
        @(string.IsNullOrWhiteSpace(LocalUser.Name) ? "Ibis User" : LocalUser.Name)
        <aside>
            @LocalUser.Language
            @if (!string.IsNullOrWhiteSpace(LocalUser.Pronouns))
            {
                <span> &#8226; </span>
            }
            @LocalUser.Pronouns
        </aside>
    </figcaption>
</figure>

@code {
    [Parameter] public UserAvatar User { get; set; } = null!;
    [Parameter] public string? EditTab { get; set; }
    [Parameter] public bool SpillBackground { get; set; }
    UserAvatar LocalUser = null!;

    protected override async Task OnInitializedAsync()
    {
        LocalUser = User;
        await On<UserAvatarUpdated>(User.Id, x => LocalUser = x.Avatar);
    }

    bool HasEmoji => !string.IsNullOrWhiteSpace(LocalUser?.Emoji);
    string Emoji => !HasEmoji
        ? LocalUser.Initials.ToUpper()
        : LocalUser.Emoji;

    void Edit()
    {
        if (EditTab == null)
            return;

        var parameters = new ModalParameters();
        parameters.Add("Tab", EditTab);

        Modal.Show<Onboarding.Index>("Edit Your Avatar", parameters, new ModalOptions { HideHeader = true, Size = ModalSize.Automatic });
    }

    async Task SpeakAsync(byte[] audio)
    {
        await JS.InvokeVoidAsync("speak", Convert.ToBase64String(audio));
    }
}

