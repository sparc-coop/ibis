@inherits RealtimeComponent
@implements IAsyncDisposable

@page "/rooms/{Slug}"

<section class="room">
    <header>
        @if (RoomInfo != null)
        {
            <h2>
                @RoomInfo.Name
            </h2>
            <InviteUser RoomId="@RoomInfo.RoomId" />
            <button @onclick="@(() => DownloadText("TXT"))" aria-label="Download Text" class="select-upload" title="Download text transcript">
                <DownloadIcon />
            </button>
            <button @onclick="@(() => DownloadText("SRT"))" aria-label="Download Subtitles" class="select-upload" title="Download subtitles">
                <DownloadIcon />
            </button>
            <button @onclick="DownloadAudio" aria-label="Download Audio" class="select-upload" title="Download audio transcript">
                <DownloadIcon />
            </button>
        }
    </header>
    @if (RoomInfo != null)
    {
        <MessageList Room="RoomInfo" />
        <AvatarList Room="RoomInfo" />
    }
</section>

@code {
    [Parameter] public string Slug { get; set; } = null!;

    GetRoomResponse? RoomInfo;

    protected override async Task OnInitializedAsync()
    {
        RoomInfo = await Api.JoinRoomAsync(new JoinRoomRequest { Slug = Slug });
        await On<UserJoined>(RoomInfo.RoomId, x => { });
    }

    async Task DownloadAudio()
    {
        var audio = await Api.GetRoomAudioAsync(new GetRoomAudioRequest { RoomId = RoomInfo!.RoomId });
        await JS.InvokeVoidAsync("triggerFileDownload", audio.Url);
    }

    async Task DownloadText(string format)
    {
        var result = await Api.GetRoomTextAsync(new GetRoomTextRequest { RoomId = RoomInfo!.RoomId, Format = format });

        byte[] bytes = Encoding.ASCII.GetBytes(result.Text);
        Stream fileStream = new MemoryStream(bytes);

        var fileName = $"{RoomInfo!.Name}.{format.ToLower()}";
        foreach (char c in System.IO.Path.GetInvalidFileNameChars())
        {
            fileName = fileName.Replace(c, '_');
        }

        using var streamRef = new DotNetStreamReference(stream: fileStream);
        await JS.InvokeVoidAsync("downloadFileFromStream", fileName, streamRef);
    }

    void UpdateName()
    {
        // await Connection!.SendAsync("UpdateRoom", RoomInfo);
    }

    async ValueTask IAsyncDisposable.DisposeAsync()
    {
        await Api.LeaveRoomAsync(new LeaveRoomRequest { RoomId = RoomInfo!.RoomId });
    }
}
