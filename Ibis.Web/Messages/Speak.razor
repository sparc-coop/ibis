<section class="speak">
    <div class="input">
@*        <input @bind="Text" readonly=true />
        <div class="buttons">
            <button @onclick="SendText">
                <i class="material-icons">send</i>
            </button>
            <button @onclick="Cancel">cancel</button>
        </div>
*@
        <h3>Recording...</h3>
        @if (Text == null)
        {
            <audio src="/sounds/beep_up.wav" autoplay />
        }
@*        <div class="buttons">
            <button @onclick="@(StopSpeechRecognition)" aria-label="Stop Recording">
                <i class="material-icons" style="color: darkred;">keyboard_voice</i>
            </button>
            @if (StopRecordingSpeech == true)
            {
                <audio src="/sounds/beep_down.wav" autoplay />
            }
        </div>*@
    </div>
</section>

@using Blazored.Modal;
@inject IModalService Modal;

@code {
    [Parameter] public string? RoomId { get; set; }
    [Parameter] public string? Language { get; set; }
    [Parameter] public SourceTypes? SourceType { get; set; }
    string? Text;
    Message? Message;
    List<Message> Messages = new();
    //bool StopRecordingSpeech = false;

    [CascadingParameter] BlazoredModalInstance ModalInstance { get; set; } = default!;

    protected override async Task OnInitializedAsync()
    {
        var newMessage = await Api.TranscribeSpeechAsync(new TranscribeSpeechRequest { RoomId = RoomId, Language = Language });
        if (newMessage != null)
        {
            //StopRecordingSpeech = true;
            Text = newMessage.Text;
            newMessage.ModifiedText = Text;
            Message = newMessage;
            ShowConfirmOrEditTextModal(RoomId!, Language!, Message, Message.Text, Message.SourceType, null);
            if (newMessage.Text == null || newMessage.Text.Length == 0)
            {
                await Api.DeleteMessageAsync(new DeleteMessageRequest { RoomId = RoomId, MessageId = newMessage.Id });
            }
        }
        
        await ModalInstance.CloseAsync(ModalResult.Ok(true));
    }

    void ShowConfirmOrEditTextModal(string roomId, string language, Message message, string text, SourceTypes sourceType, byte[]? bytes)
    {
        List<Message> MessageList = new List<Message>();
        MessageList.Add(message);
        var parameters = new ModalParameters();
        parameters.Add(nameof(ConfirmOrEditText.RoomId), roomId);
        parameters.Add(nameof(ConfirmOrEditText.Language), language);
        parameters.Add(nameof(ConfirmOrEditText.MessageList), MessageList);
        parameters.Add(nameof(ConfirmOrEditText.Bytes), bytes);

        Modal.Show<ConfirmOrEditText>("Review Before Sending", parameters);
    }
}
