@page "/conversations/new"
@page "/conversations/{Id}"
@layout DashLayout
@attribute [Authorize]

@*<section class="conversation">
    <a href="/dashboard">All conversations</a>
    @if(Conversation != null)
    {
        <h4>
            @if(ToggleEdit == false)
            {
                @Conversation.Name
                <i class="material-icons" @onclick="@(() => ToggleEdit = true)">edit</i>
            } else
            {

                <input @bind="Conversation.Name">
                <button class="save" @onclick="@(() => UpdateName())">Save</button>
            }
        </h4>   
    }
    <InviteUser ConversationId="@Conversation.Id" />

    @if(Messages.Count > 0)
    {
         <div class="messages">
            @foreach (var message in Messages)
            {
                <MessageCard Message=message Language=@Language />
            }
        </div>   
    }
    <div class="conversation-language">
        Language: @Language*@
@*        <div class="switch-lang">
            <select @onchange="SwitchLanguage">
			     <option disabled>Select Language</option>
			     @foreach(var item in LanguageList.Languages)
			     {
				     <option value="@item.Key">@item.Value.Name</option>
			     }
		     </select>
        </div>*@
@*    </div>
    <div class="input">
        <input @bind="Text" @bind:event="oninput" @onkeydown=MaybeSendText />
        <div class="options">
            <button @onclick="@(() => ShowUploadModal(Id, Language))">
               <i class="material-icons">cloud_upload</i>
            </button>
            <button @onclick="DownloadText" aria-label="Download Text">
                <i class="material-icons">file_download</i>
            </button>
            <button @onclick="DownloadAudio" aria-label="Download Audio">
                <i class="material-icons">audio_file</i>
            </button>
            <button @onclick="Call" aria-label="Call">
                <i class="material-icons">call</i>
            </button>
            <button @onclick="Sms" aria-label="Sms">
                <i class="material-icons">sms</i>
            </button>
            <button @onclick="Speak" aria-label="Speak">
                <i class="material-icons">keyboard_voice</i>
            </button>
             <button @onclick="DownloadSRT">
                <i class="material-icons">file_download</i>
            </button>
        </div>
        <div class="buttons">
            <button @onclick="SendText" aria-label="Send" class="active">
                <i class="material-icons">send</i>
            </button>
        </div>
    </div>
</section>*@


<section class="conversations">
    <div class="conversation">

        <header>
            <div>
                <h2>Monthly Catchup</h2>
                <button class="user-invite"><img src="icons/person-Icon.svg" />Invite People</button> 
            </div>
            <p>Conversation Time: <span>1:17</span></p>
        
        </header>

        <div class="content">
            <div class="conversation-grid">
                <div class="conversation-card card-1">
                    <div class="conversation-card-content">
                        <div class="account-name">
                            Kieran Parker
                        </div>
                        <p>
                            Lorem ipsum dolor sit amet, consectetuer adipiscing elit. Aenean commodo ligula eget dolor. Aenean massa. Cum sociis natoque penatibus et magnis dis parturient montes, nascetur ridiculus mus. Donec quam felis, ultricies nec, pellentesque eu, pretium quis, sem.
                        </p>
                    </div>
                </div>
                <div class="conversation-card card-2">
                    <div class="conversation-card-content">
                        <div class="account-name">
                            Kieran Parker
                        </div>
                        <p>
                            Lorem ipsum dolor sit amet, consectetuer adipiscing elit. Aenean commodo ligula eget dolor. Aenean massa. Cum sociis natoque penatibus et magnis dis parturient montes, nascetur ridiculus mus. Donec quam felis, ultricies nec, pellentesque eu, pretium quis, sem.
                        </p>
                    </div>
                </div>
                <div class="conversation-card card-1">
                    <div class="conversation-card-content">
                        <div class="account-name">
                            Kieran Parker
                        </div>
                        <p>
                            Lorem ipsum dolor sit amet, consectetuer adipiscing elit. Aenean commodo ligula eget dolor. Aenean massa. Cum sociis natoque penatibus et magnis dis parturient montes, nascetur ridiculus mus. Donec quam felis, ultricies nec, pellentesque eu, pretium quis, sem.
                        </p>
                    </div>
                </div>
                <div class="conversation-card card-2">
                    <div class="conversation-card-content">
                        <div class="account-name">
                            Kieran Parker
                        </div>
                        <p>
                            Lorem ipsum dolor sit amet, consectetuer adipiscing elit. Aenean commodo ligula eget dolor. Aenean massa. Cum sociis natoque penatibus et magnis dis parturient montes, nascetur ridiculus mus. Donec quam felis, ultricies nec, pellentesque eu, pretium quis, sem.
                        </p>
                    </div>
                </div>

                <div class="message-box-top">
                    <div class="message">
                        <input type="text" placeholder="Type Something..." />
                    </div>
                    <button class="button-send">Send <img src="icons/send.svg" /></button>
                </div>
                <div class="message-box-bottom">
                    <div class="message-options">

                        <div class="translate">
                            <img src="icons/Translate.svg" />
                            <p>Auto Translate</p>
                        </div>

                        @*Make Text Dark Blue When checked*@
                        <div class="switch-wrapper">
                            <!-- Rounded switch -->
                            <label class="switch">
                              <input type="checkbox">
                              <span class="slider round"></span>
                            </label>
                            <p>Voice</p>
                            
                        </div>
                        @*Make Text Dark Blue When checked*@
                        <div class="switch-wrapper">
                            <!-- Rounded switch -->
                            <label class="switch">
                              <input type="checkbox">
                              <span class="slider round"></span>
                            </label>
                            <p>Text</p>
                        </div>
                        
                        
                    </div>
                </div>


            </div>
        </div>
    </div>

    <div class="camera-grid">
        <div class="presenter">
            <div class="image-wrapper">
                <img src="/images/1.png" />
                <div class="camera-pin"><img src="/icons/Pin.svg" /></div>
                <div class="camera-voice"><img src="/icons/MicStatus.svg" /></div>
                <h6 class="camera-name">Titus Kitamura</h6>
                <div class="camera-translation"><p class="xsmall">English</p><img src="/icons/Arrow_Swap.svg" /><p class="small">English</p></div>
            </div>
        </div>
        
        <div class="users">
            <div class="image-wrapper">
                <img src="/images/2.png" />
                <div class="camera-voice"><img src="/icons/MicStatus.svg" /></div>
                <p class="camera-name small">Elanor Pera</p>
            </div>
            <div class="image-wrapper">
                <img src="/images/2.png" />
                <div class="camera-voice"><img src="/icons/MicStatus.svg" /></div>
                <p class="camera-name small">Elanor Pera</p>
            </div>
            <div class="image-wrapper">
                <img src="/images/2.png" />
                <div class="camera-voice"><img src="/icons/Mute.svg" /></div>
                <p class="camera-name small">Elanor Pera</p>
            </div>
            <div class="image-wrapper">
                <img src="/images/2.png" />
                <div class="camera-voice"><img src="/icons/MicStatus.svg" /></div>
                <p class="camera-name small">Elanor Pera</p>
            </div>
            <div class="image-wrapper">
                <img src="/images/2.png" />
                <div class="camera-voice"><img src="/icons/MicStatus.svg" /></div>
            </div>
            <div class="image-wrapper">
                <img src="/images/2.png" />
                <div class="camera-voice"><img src="/icons/Mute.svg" /></div>
                <p class="camera-name small">Elanor Pera</p>
            </div>
            <div class="image-wrapper">
                <img src="/images/2.png" />
                <div class="camera-voice"><img src="/icons/MicStatus.svg" /></div>
            </div>
            <div class="image-wrapper">
                <img src="/images/2.png" />
                <div class="camera-voice"><img src="/icons/MicStatus.svg" /></div>
            </div>
            <div class="image-wrapper">
                <img src="/images/2.png" />
                <div class="camera-voice"><img src="/icons/MicStatus.svg" /></div>
            </div>
        </div>

        <div class="camera-buttons">
            <button>
                <img src="/icons/Leave_icon.svg" />
                Leave
            </button>

            <div class="audio-buttons">
                <div><img src="/icons/Microphone.svg" /></div>
                <div><img src="/icons/Video.svg" /></div>
            </div>
            
        </div>
        
    </div>

</section>




@code {
    [Parameter] public string? Id { get; set; }
    [Parameter]
    [SupplyParameterFromQuery(Name = "language")] public string? Language { get; set; }
    string? Text;
    Conversation? Conversation;
    List<Message> Messages = new();

    HubConnection Connection { get; set; }
    bool IsConnected => Connection?.State == HubConnectionState.Connected;
    bool ToggleEdit = false;
    GetLanguageListResponse LanguageList;

    protected override async Task OnInitializedAsync()
    {
        LanguageList = await PublicApi().GetLanguageListAsync();

        var user = await Api.GetUserAsync();

        if (string.IsNullOrWhiteSpace(Language))
            Language = string.IsNullOrWhiteSpace(user.Language) ? "en-US" : user.Language;

        if (string.IsNullOrWhiteSpace(Id))
        {
            Conversation = await Api.StartConversationAsync();
            Nav.NavigateTo($"/conversations/{Conversation.Id}", true);
        }
        else 
        {
            var conversation = await Api.GetConversationAsync(new GetConversationRequest { ConversationId = Id, Language = Language });
            Conversation = conversation.Conversation;
            Messages = conversation.Messages.ToList();
        }

        Connection = new HubConnectionBuilder()
            .WithUrl(Config["ApiUrl"] + "/conversations")
            .Build();

        Connection.On<Message>("NewMessage", message => {
            message.IsNew = true;
            AddMessage(message);
        });
        await Connection.StartAsync();
        await Connection.SendAsync("AddToConversation", Conversation.Id, user.Id, Language);
    }

    void AddMessage(Message message)
    {
        var existingId = Messages.FindIndex(x => x.Id == message.Id);
        if (existingId > -1)
            Messages[existingId] = message;
        else
            Messages.Add(message);

        StateHasChanged();
    }

    void ShowUploadModal(string conversationId, string language)
    {
        var parameters = new ModalParameters();
        parameters.Add(nameof(Upload.ConversationId), conversationId);
        parameters.Add(nameof(Upload.Language), language);
        Modal.Show<Upload>("Upload", parameters);
    }

    async Task RefreshConversation()
    {
        var conversation = await Api.GetConversationAsync(new GetConversationRequest { ConversationId = Id, Language = Language });
        Conversation = conversation.Conversation;
        Messages = conversation.Messages.ToList();
    }

    async Task Call()
    {

    }
    async Task Sms()
    {

    }

    async Task Speak()
    {
        var newMessage = await Api.TranscribeSpeechAsync(new TranscribeSpeechRequest { ConversationId = Id, Language = Language });
        AddMessage(newMessage);
    }

    async Task MaybeSendText(KeyboardEventArgs args)
    {
        if (args.Code == "Enter")
            await SendText();
    }

    async Task SendText()
    {
        var newMessage = await Api.SendMessageAsync(new SendMessageRequest { ConversationId = Conversation.Id, Message = Text, Language = Language, MessageId = null, ModifiedMessage = null, Bytes = null });
        AddMessage(newMessage);
        Text = null;
    }

    async Task DownloadText()
    {
        StringBuilder builder = new StringBuilder();
        foreach(var message in Messages)
        {
            builder.AppendLine(message.Timestamp.LocalDateTime.ToString("MM/dd/yyyy hh:mm tt") + ": " +  message.Text);
        }

        byte[] bytes = Encoding.ASCII.GetBytes(builder.ToString());
        Stream fileStream = new MemoryStream(bytes);

        var fileName = GetFileName(Conversation?.Name);
        Console.WriteLine("test1" + fileName);
        using var streamRef = new DotNetStreamReference(stream: fileStream);
        await JS.InvokeVoidAsync("downloadFileFromStream", fileName, streamRef);
    }

    async Task DownloadAudio()
    {
        List<string> mergeFiles = new List<string>();
        foreach(var message in Messages)
        {
            mergeFiles.Add(message.AudioId);
        }

        var filePath = await Api.MergeAudioAsync(new MergeAudioRequest {Files = mergeFiles, ConversationId = Conversation.Id, Language = "en-US" });
        Console.WriteLine(filePath);
        var fileName = GetFileName(Conversation?.Name);
        await JS.InvokeVoidAsync("triggerFileDownload", fileName + ".wav", filePath);
    }

    string GetFileName(string name)
    {
        var fileName = name;// != null ? name + ".txt" : "transcript.txt";
        foreach(char c in System.IO.Path.GetInvalidFileNameChars())
        {
            fileName = fileName.Replace(c, '_');
        }

        return fileName;
    }

    async Task DownloadSRT()
    {
        StringBuilder builder = new StringBuilder();

        var num = 1;
        foreach(var message in Messages)
        {

            //var frame = num;
            builder.AppendLine(num.ToString());
            num++;
            //hours:minutes:seconds,milliseconds –> hours:minutes:seconds,milliseconds
            builder.AppendLine(message.Timestamp.LocalDateTime.ToString("hh:mm:ss,ms") + " --> " + message.Timestamp.LocalDateTime.AddSeconds(10).ToString("hh:mm:ss,ms"));
            builder.AppendLine(message.Text);
            builder.Append(Environment.NewLine);
        }

        byte[] bytes = Encoding.ASCII.GetBytes(builder.ToString());
        Stream fileStream = new MemoryStream(bytes);

        var fileName = Conversation?.Name + ".srt" ?? "testcaptions.srt";
        foreach(char c in System.IO.Path.GetInvalidFileNameChars())
        {
            fileName = fileName.Replace(c, '_');
        }

        using var streamRef = new DotNetStreamReference(stream: fileStream);
        await JS.InvokeVoidAsync("downloadFileFromStream", fileName, streamRef);
    }

    async void UpdateName()
    {
        ToggleEdit = false;
        await Connection.SendAsync("UpdateConversation", Conversation);
    }

    async void SwitchLanguage(ChangeEventArgs e)
    {
        Language = e.Value.ToString();
        var response = await Api.AddTranslationAsync(new AddTranslationRequest { ConversationId = Conversation.Id, Language = Language});
        Messages = response.ToList();      
    }
}
