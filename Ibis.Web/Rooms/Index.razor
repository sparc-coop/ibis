@page "/rooms"
@layout DashLayout

<div class="dashboard">
	 <div class="actions">
         <div class="header">
             <h3>Your Rooms</h3>
             <button class="add" @onclick="CreateRoom">
                 <i class="material-icons">add</i>Create New Room
            </button>
            <Tooltip Text="Start your first room!"/>
         </div>
         <div class="search-wrapper">
             <div class="searchbar">
                 <input placeholder="Search rooms" @onchange="@SearchRooms"/>
                 <a class="search"><img src="/icons/Search.svg" /></a>
             </div>
             <div class="grid-wrapper">
                 <div class="selected @(listView != "" ? "selected-left" : null)"></div>
                 <div class="grid" @onclick="ToggleListView">
                     Grid
                 </div>
                 <div class="list" @onclick="ToggleListView">
                     List
                 </div>
             </div>
         </div>
    </div>

    <div class="rooms @listView">
        @if(Rooms != null)
        {
            @foreach(var room in Rooms.OrderByDescending(x => x.LastActiveDate).ThenByDescending(x => x.StartDate))
            {
                <div class="room-card" @onclick="@(e => GoToRoom(room.RoomId))">
                    <div class="top-bar">
                        <div class="room-icon">
                            <img src="/icons/Room-Icon.svg" />
                        </div>
                        <div class="option-icons" @onclick:stopPropagation="true">
                            <input type="hidden" id="@room.RoomId" value="@("https://www.ibis.com/" + room.RoomId)" />
                            <img src="/icons/link.svg" @onclick:stopPropagation="true" @onclick="@(e => ShareLink(room.RoomId))"/>
                            <span id="copy-@room.RoomId"></span>
                            <img src="/icons/more-vertical.svg" @onclick:stopPropagation="true" @onclick="@(e => ToggleDropdown(room.RoomId))"/>
                        </div>
                        <div class="dropdown" id="@("dropdown-"+room.RoomId)" @onclick:stopPropagation="true">
                            <div class="dropdown--overlay" @onclick:stopPropagation="true" @onclick="@(e => ToggleDropdown(room.RoomId))"></div>
                            <ul>
                                <li @onclick="@(e => ShowEditModal(room.RoomId, room.Name))">Edit Name</li>
                                <li @onclick="@(e => ShowDeleteModal(room.RoomId))">Delete Room</li>
                            </ul>
                        </div>
                    </div>
                    <div class="room-details">
                        <h6>@room.Name</h6>
                        <p class="medium">
                        @(room.LastActiveDate != null 
                            ? room.LastActiveDate.Value.LocalDateTime.ToString("MMMM dd, H:mm tt")
                            : room.StartDate.LocalDateTime.ToString("MMMM dd, H:mm tt"))
                        </p>
                    </div>
                <div class="room-members">
                    @foreach(var member in room.ActiveUsers.Take(10))
                    {
                        <Avatar User="member" />
                    }      
                </div>
            </div>
            }  
        }
    </div>
</div>


@code {
    ICollection<GetRoomResponse> Rooms = new List<GetRoomResponse>();
    ICollection<GetRoomResponse>? OriginalList;
    string listView = "";

    protected override async Task OnInitializedAsync()
    {
        Rooms = await Api.GetRoomsAsync();
        OriginalList = Rooms;
    }

    public record LanguageItem(string name, string nativeName, string dir);

    void CreateRoom()
    {
        Modal.Show<CreateRoomModal>("Create Room");
    }

    void GoToRoom(string Id)
    {
        Nav.NavigateTo($"/rooms/{Id}", true);    
    }

    void ToggleListView()
    {
        if(string.IsNullOrEmpty(listView))
        {
            listView = "show-list";
        } else
        {
            listView = "";
        }
    }

    async Task ToggleDropdown(string roomId)
    {
        await JS.InvokeVoidAsync("toggleRoomDropdown", roomId);
    }

    async Task ShareLink(string roomLink)
    {
        await JS.InvokeVoidAsync("copyToClipboard", roomLink, "list");
    }

    async Task ShowDeleteModal(string room)
    {
        var parameters = new ModalParameters();
        parameters.Add(nameof(DeleteModal.RoomId), room);
        var deleteModal = Modal.Show<DeleteModal>("DeleteModal", parameters);        
        var result = await deleteModal.Result;

        if(result.Cancelled)
        {
            Rooms = await Api.GetRoomsAsync();
            await JS.InvokeVoidAsync("toggleRoomDropdown", room);
        }
    }

    async Task ShowEditModal(string roomId, string name)
    {
        var parameters = new ModalParameters();
        parameters.Add(nameof(EditModal.RoomId), roomId);
        parameters.Add(nameof(EditModal.Title), name);
        var editModal = Modal.Show<EditModal>("EditModal", parameters);

        var result = await editModal.Result;
        if(result.Cancelled)
        {
            Rooms = await Api.GetRoomsAsync();
            await JS.InvokeVoidAsync("toggleRoomDropdown", roomId);
        }
    }

    void SearchRooms(ChangeEventArgs search)
    {
        string searchTerm = search.Value!.ToString()!.ToLower();

        if (searchTerm.Length >= 3)
        {
            Rooms = Rooms.Where(x => x.Name.ToLower().Contains(searchTerm)).ToList();
        } else if (string.IsNullOrEmpty(searchTerm))
        {
            Rooms = OriginalList!;
        }
    }
}