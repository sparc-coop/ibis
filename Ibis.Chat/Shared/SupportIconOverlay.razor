@using Sparc.Blossom.Authentication;
@using Sparc.Ibis;

<CascadingValue Value="User">
    <div class="support-icon">
        <button type="button" class="open-widget" @onclick="ToggleWidget">
            @if (!ShowWidget && !HasUnreadSupportMessages)
            {
                <img src="images/SupportWidget_Icon.png" />
            } else if (!ShowWidget && HasUnreadSupportMessages)
            {
                <img src="images/SupportWidget_Notification.png" />
            }
        </button>
        @if (ShowWidget) {
            <SupportWidget />
            <button type="button" class="close-widget" @onclick="ToggleWidget"><img src="icons/X.svg" /></button>
        }
    </div>
</CascadingValue>

@inject AuthenticationStateProvider AuthenticationStateProvider

@code {
    UserAvatar? User;
    ICollection<GetRoomResponse>? Rooms;
    Room? SupportRoom;
    bool HasSupportRoom = false;
    bool HasUnreadSupportMessages = false;
    bool ShowWidget = false;

    protected override async Task<ICollection<GetRoomResponse>> OnParametersSetAsync()
    {
        var rooms = await Api.GetRoomsAsync();
        Rooms = rooms.HostedRooms.Union(rooms.InvitedRooms).ToList();
        return Rooms;
        // need to add SupportRoom parameters to GetRoomResponse
        // check if user has an active/unresolved Support Room
        // check if there are unread messages from that support room
        // if there are unread messages from that support room, make HasUnreadSupportMessages = true
        // displays SupportWidget Icon with Notification bubble

        // if user has an active/unresolved Support Room, when user clicks on icon
        // open widget with active Support Room
    }

    void ToggleWidget()
    {
        //var parameters = new ModalParameters();
        //parameters.Add(nameof(Room.RoomId), Room.RoomId);
        if (!ShowWidget)
        {
            ShowWidget = true;
        } else
        {
            ShowWidget = false;
        }
    }
}