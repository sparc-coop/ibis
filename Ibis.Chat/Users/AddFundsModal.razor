@inherits SparcModal
@using System.Globalization;

<div class="add-funds-modal">
    @if (NewBalance == null)
    {
        <aside>
            Select the amount of minutes you wish to purchase and add to your Ibis account.
        </aside>
        @if (PaymentIntent != null)
        {
            @if (Balance != null)
            {
                <div class="show-balance">
                    Your current balance:
                    <strong>@Math.Floor(Balance.Value.TotalMinutes).ToString("N0") minutes @Balance.Value.Seconds.ToString("N0") seconds</strong>
                </div>
            }
            <ul class="@(SelectedPackage == null ? "" : "selected")">
                @foreach (var amount in PaymentIntent.Amounts)
                {
                    <li class="@(SelectedPackage?.Amount == amount.Amount ? "selected" : "")" @onclick="(() => ChoosePackage(amount))">
                        <header>@amount.Amount.ToString("C0")</header>
                        <aside>@Math.Floor(TimeSpan.FromTicks(amount.Ticks).TotalMinutes).ToString("N0") minutes</aside>
                    </li>
                }
            </ul>

            <form>
                <div id="payment-element"></div>
                <footer>
                    @if (SelectedPackage != null)
                    {
                        <button type="button" class="secondary" @onclick=Back>Back</button>
                        <button type="button" @onclick=Pay>
                            Add @Math.Floor(TimeSpan.FromTicks(SelectedPackage.Ticks).TotalMinutes).ToString("N0") minutes
                        </button>
                    }
                </footer>
            </form>
        }
    }
    else
    {
        <aside>Thank you! Your purchase was successful. Your balance will be updated in real time as soon as your payment is processed (typically a few seconds).</aside>
        <form>
            <dl>
                <dt>Your current balance</dt>
                <dd>@Math.Floor(Balance!.Value.TotalMinutes).ToString("N0") minutes @Balance.Value.Seconds.ToString("N0") seconds</dd>
                <dt>Minutes added</dt>
                <dd>@Math.Floor(TimeSpan.FromTicks(SelectedPackage!.Ticks).TotalMinutes).ToString("N0") minutes @Balance.Value.Seconds.ToString("N0") seconds</dd>
                <dt>Your new balance will be:</dt>
                <dd>@Math.Floor(NewBalance.Value.TotalMinutes).ToString("N0") minutes @NewBalance.Value.Seconds.ToString("N0") seconds</dd>
            </dl>
            <footer>
                <button type="button" @onclick=Close>OK</button>
            </footer>
        </form>
    }
</div>


@code {
    [Parameter] public string? PaymentIntentClientSecret { get; set; }
    List<double> Amounts = new();
    TicksPackage? SelectedPackage;
    PaymentIntentResponse? PaymentIntent;
    TimeSpan? Balance;
    TimeSpan? NewBalance;

    protected override async Task OnInitializedAsync()
    {
        var ri = new RegionInfo(System.Threading.Thread.CurrentThread.CurrentUICulture.LCID);
        PaymentIntent = await Api.CreatePaymentIntentAsync(new PaymentIntentRequest { Amount = 0, Currency = ri.ISOCurrencySymbol });
        var ticks = await Api.GetUserBalanceAsync();
        Balance = TimeSpan.FromTicks(ticks);
    }

    async Task ChoosePackage(TicksPackage package)
    {
        SelectedPackage = package;
        await UpdatePaymentAsync();
    }

    async Task UpdatePaymentAsync()
    {
        if (SelectedPackage == null)
            return;

        var request = new PaymentIntentRequest
            {
                Id = PaymentIntent?.Id,
                Amount = SelectedPackage.Amount,
                Currency = PaymentIntent?.Currency
            };

        PaymentIntent = await Api.CreatePaymentIntentAsync(request);
        await JS.InvokeVoidAsync("initStripe", PaymentIntent.ClientSecret, "#payment-element");
    }

    void Back() => SelectedPackage = null;

    async Task Pay()
    {
        // Loading indicator
        var result = await JS.InvokeAsync<string>("confirmStripe", Nav.Uri);
        NewBalance = Balance!.Value.Add(new(SelectedPackage!.Ticks));
    }

    async Task Close() => await Ok();
}