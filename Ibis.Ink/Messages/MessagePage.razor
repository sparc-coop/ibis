@page "/content/{RoomId}"
@page "/content/{RoomId}/{Id}"
@inherits RealtimeComponent

<div class="message-page">
    <button @onclick="GoBack" class="back">Back to project content</button>

    <div class="blog-check">
        <label>Is this a blog post? This will add a timestamp.</label>
        <input type="checkbox" @bind="@IsBlog" @onclick="UpdateMessage"/>
    </div>

    @if (string.IsNullOrEmpty(Id) || IsEditing == true)
    {
        <NewMessage Room="RoomInfo" OnSetMessage="SetNewMessage" OnDoneEditing="DoneEditing" SelectedMessage="SelectedMessage" />
    }
    else
    {
        <MessageCard Message="Message" OnEdit="EditMessage" OnDelete="DeleteMessage" />
    }

</div>

@code {
    [Parameter] public string Id { get; set; } = null!;
    [Parameter] public string RoomId { get; set; } = null!;
    Message? SelectedMessage;
    Message? Message;
    GetRoomResponse? RoomInfo;
    bool IsEditing = false;
    bool IsBlog = false;

    protected override async Task OnInitializedAsync()
    {
        if(Id != null)
        {
            Message = await Api.GetMessageAsync(new GetMessageRequest { RoomSlug = RoomId, Tag = Id }); 

            if (Message.Type == "blog")
                IsBlog = true;
        }

        RoomInfo = await Api.JoinRoomAsync(new JoinRoomRequest { RoomId = RoomId });
        await On<UserJoined>(RoomInfo.RoomId, x => { });
    }

    void GoBack()
    {
        Nav.NavigateTo($"/rooms/{RoomId}");
    }

    void EditMessage()
    {
        IsEditing = !IsEditing;
        SelectedMessage = Message;
    }

    void DoneEditing() 
    {
        IsEditing = false;
    }

    async Task DeleteMessage(Message message)
    {
        await Api.DeleteMessageAsync(new DeleteMessageRequest { RoomId = RoomId, MessageId = message.Id });
        GoBack();
    }

    void SetNewMessage(Message message)
    {
        Message = SelectedMessage = message;
        Id = message.Id;
    }

    async Task UpdateMessage()
    {
        IsBlog = !IsBlog;

        if(IsBlog == true)
        {
            Message.Type = "blog";
            await Api.UpdateMessageTypeAsync(new UpdateMessageTypeRequest { MessageId = Message.Id, RoomId = RoomId, Type = Message.Type });
        }
    }

}