@attribute [Authorize]
@page "/rooms"

<div class="dashboard">
    <div class="actions">
        <div class="header">
            <h2>Your Rooms</h2>
            <button class="add" @onclick="CreateRoom">
                &plus;  Create New Room
            </button>
            <Tooltip Text="Start your first room!" />
        </div>
        <div class="search-wrapper">
            <div class="searchbar">
                <input aria-label="Search" placeholder="Search rooms" @onchange="@SearchRooms" />
                <span class="search"><img alt="" src="/icons/Search.svg" /></span>
            </div>
            <div tabindex="0" class="grid-wrapper" @onclick="ToggleListView" @onkeypress="@Enter">
                <div class="selected @(listView != "" ? "selected-left" : null)"></div>
                <div class="grid">
                    Grid
                </div>
                <div class="list">
                    List
                </div>
            </div>
        </div>
    </div>

    <div class="rooms @listView">
        @if (Rooms != null)
        {
            @foreach (var room in Rooms.OrderByDescending(x => x.LastActiveDate).ThenByDescending(x => x.StartDate))
            {
                <RoomCard Room=room />
            }
            @if (!Rooms.Any())
            {
                <div class="welcome">
                    <figure>
                        <img src="/images/logo_icon.png" alt="Welcome to Ibis" />
                    </figure>
                    <h3>Welcome to Ibis!</h3>
                    <p>Host your first room by clicking the Create New Room button above.</p>
                    <p>Or, click your Ibis Avatar below to set up your profile:</p>
                    @if (Me != null)
                    {
                        <Avatar User="Me" EditTab="Profile" />
                    }
                </div>
            }
        }
    </div>
</div>

@inject Sparc.Blossom.Authentication.BlossomAuthenticationStateProvider Auth
@code {
    ICollection<GetRoomResponse>? Rooms;
    ICollection<GetRoomResponse>? OriginalList;
    string listView = "";
    TimeSpan? Balance;
    [CascadingParameter] public UserAvatar? Me { get; set; }

    protected override async Task OnInitializedAsync()
    {
        try
        {
            var ticks = await Api.GetUserBalanceAsync();
            Balance = TimeSpan.FromTicks(ticks);

            if (Balance.Value.Ticks <= 0)
            {
                Modal.Show<AddFundsModal>("Add Funds");
            }

            var rooms = await Api.GetRoomsAsync();
            Rooms = rooms.HostedRooms.Union(rooms.InvitedRooms).ToList();
            OriginalList = Rooms;
        }
        catch (ApiException ex) when (ex.StatusCode == 401)
        {
            await Auth.LogoutAsync();
            Nav.NavigateTo("/rooms", true);
        }
    }

    void CreateRoom()
    {
        Modal.Show<CreateRoomModal>("Create Room");
    }

    void ToggleListView()
    {
        if (string.IsNullOrEmpty(listView))
        {
            listView = "show-list";
        }
        else
        {
            listView = "";
        }
    }

    void SearchRooms(ChangeEventArgs search)
    {
        string searchTerm = search.Value!.ToString()!.ToLower();

        if (searchTerm.Length >= 3)
        {
            Rooms = Rooms.Where(x => x.Name.ToLower().Contains(searchTerm)).ToList();
        }
        else if (string.IsNullOrEmpty(searchTerm))
        {
            Rooms = OriginalList!;
        }
    }

    public void Enter(KeyboardEventArgs e)
    {
        if (e.Key == "Enter" || e.Key == "ArrowRight" || e.Key == "ArrowLeft")
        {
            ToggleListView();
        }
    }
}