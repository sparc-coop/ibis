@using System.Web
@inherits RealtimeComponent

<article class="message-card ibis-ignore" @onclick="GoToSubroom">
    <Avatar User="Message.User" SpillBackground="true" />
    @if (Me?.Id == Message.User.Id)
    {
        <ul class="actions">
            <li class="actions-tags" @onclick=EditTags>
                Tags
            </li>
            <li @onclick=Edit>
                Edit
            </li>
            <li @onclick=Delete>
                Delete
            </li>
        </ul>
    }
    <Sparc.Ibis.IbisContent Message="Message" />
</article>

@code {
    [Parameter] public Message Message { get; set; } = new();
    [Parameter] public EventCallback<Message> OnEdit { get; set; }
    [Parameter] public EventCallback<Message> OnDelete { get; set; }
    [CascadingParameter] public UserAvatar? Me { get; set; }

    void GoToSubroom()
    {
        //if (Message != null)
        //    Nav.NavigateTo($"/rooms/{Message.SubroomId}");
    }

    async Task Edit()
    {
        if (OnEdit.HasDelegate)
            await OnEdit.InvokeAsync(Message);
    }

    void EditTags()
    {
        var parameters = new ModalParameters();
        parameters.Add("Message", Message);
        Modal.Show<MessageTags>("Message Tags", parameters);
    }

    async Task Delete()
    {
        var truncatedMessage = new String(Message.Text.Take(20).ToArray()) + (Message.Text.Length > 20 ? "..." : "");

        if (!await JS.InvokeAsync<bool>("confirm", $"Are you sure you want to delete the message '{truncatedMessage}'?"))
            return;
        
        if (OnDelete.HasDelegate)
            await OnDelete.InvokeAsync(Message);
    }
}
