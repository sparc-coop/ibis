@inherits SparcModal

<div class="add-site-modal">
    <header>
        <div class="header-title-and-button">
            <div class="header-title-with-icon">
                <FilePlusIcon />
                <h5>Add new page</h5>
            </div>
            <button class="close-button" type="button" aria-label="Close" @onclick="Cancel">
                <CloseIcon />
            </button>
        </div>
        <p class="medium">Porem ipsum dolor sit amet, consectetur adipiscing elit. Nunc vulputate libero et velit interdum, ac aliquet odio.</p>
    </header>

    <div class="website-name-wrapper">
        <p class="medium">Page Name</p>        
        <select id="room" @bind="selectedRoomId">
            <option value="" disabled selected hidden>Select a Page</option>
            @if (Rooms != null)
            {
                foreach (var room in Rooms)
                {
                    <option value="@room.RoomId">@room.Name</option>
                }
            }
            <option></option>
        </select>
    </div>

    <div class="website-link-wrapper">
        <p class="medium">Page Link</p>
        <input type="text" class="website-link" placeholder="URL" @bind="newUrl" />
    </div>

    <div class="close-add-btns">
        <button class="close-button" type="button" aria-label="Close" @onclick="GoBack">Back</button>
        <button class="add-button" @onclick=AddUrl>Add URL</button>
    </div>
</div>

@code {
    [Parameter] public EventCallback<bool> OnBack { get; set; }    
    ICollection<GetRoomResponse>? Rooms;
    private string selectedRoomId;
    private string newUrl = "";
    private string SuccessMessage { get; set; } = "";
    [Parameter] public EventCallback<bool> OnUrlAdded { get; set; }

    protected override async Task OnInitializedAsync()
    {
        try
        {
            var rooms = await Api.GetRoomsAsync("Content");
            Rooms = rooms.HostedRooms.Union(rooms.InvitedRooms).ToList();
        }
        catch (ApiException ex) when (ex.StatusCode == 401)
        {
            // await Auth.LogoutAsync();
            Nav.NavigateTo("/dashboard", true);
        }
    }

    private async Task GoBack()
    {
        await OnBack.InvokeAsync(true);
    }

    async Task AddUrl()
    {
        if (!string.IsNullOrWhiteSpace(newUrl))
        {
            var request = new AddUrlToRoomRequest { RoomId = selectedRoomId, Url = newUrl };
            var success = await Api.AddUrlToRoomAsync(request);

            if (success)
            {
                SuccessMessage = "URL added successfully!";

                await OnUrlAdded.InvokeAsync(true);
            }
            else
            {
                SuccessMessage = "Failed to add URL. Please try again.";
            }

            newUrl = "";
            selectedRoomId = "";
            StateHasChanged();
            await Task.Delay(2000);
            await Ok();
        }
    }
}