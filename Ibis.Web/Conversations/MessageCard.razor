<article class="message-card">
    <div class="message-info">
        <div class="user">
            <h3>
                @(Message.UserName != null ? Message.UserName : "")
                <span>@Message.Timestamp.LocalDateTime.ToString("hh:mm tt")</span>
            </h3>
            <div class="avatar">@(Message.UserInitials != null ? Message.UserInitials : "")</div>
        </div>
@*        <time datetime="@($"{Message.Timestamp:yyyy-MM-dd}T{Message.Timestamp:hh:mm:ss}Z")">
        @Message.Timestamp.ToString("f")
        </time>*@
    </div>
    <div class="message-content">
    @MessageText
    @if (Message.IsNew && MessageAudio != null)
    {
        <audio autoplay>
            <source src="@MessageAudio" />
        </audio>
    }

        @if(MessageAudio != null)
        {

            <audio id="play-@Message.Id" class="message-audio" src="@MessageAudio" />  
            <i class="material-icons" @onclick="@(() => PlayAudio(Message.Id))">volume_up</i>
        }
    </div>
</article>

@inject IJSRuntime JS

@code {
    [Parameter] public Message Message { get; set; }
    [Parameter] public string Language { get; set; }
    string? MessageText;
    string? MessageAudio;

    protected override void OnParametersSet()
    {
        var translation = Message.Translations.FirstOrDefault(x => x.Language == Language);
        if (Message.ModifiedText == null)
        {
            //MessageText = translation?.Text ?? Message.Text;
            MessageText = Message.Text;
        } else
        {
            //MessageText = translation?.Text ?? Message.ModifiedText;
            MessageText = Message.ModifiedText;
        }

        if (translation?.AudioId != null)
        {
            MessageAudio = translation.AudioId;
            //MessageAudio = Message.ModifiedAudioId;

        } else if (Message.ModifiedAudioId != null)
        {
            MessageAudio = Message.ModifiedAudioId;
        } else
        {
            MessageAudio = Message.AudioId;
        }
    }

    async Task PlayAudio(string id)
    {
        await JS.InvokeVoidAsync("playAudio", id);
    }
}
