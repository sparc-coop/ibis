@using System.Web
@inherits RealtimeComponent

<article tabindex="0" class="message-list-card ibis-ignore" @onclick="@(e => GoToContent(Message.Id))">
    <Avatar User="Message.User" />
    @if (Me?.Id == Message.User.Id)
    {
        <ul class="actions">
            <li tabindex="0" @onclick=Delete @onkeydown="DeleteAction">
                Delete
            </li>
        </ul>
    }
    <Sparc.Ibis.IbisContent Message="Message" />
</article>

@code {
    [Parameter] public Message Message { get; set; } = new();
    [Parameter] public EventCallback<Message> OnEdit { get; set; }
    [Parameter] public EventCallback<Message> OnDelete { get; set; }
    [CascadingParameter] public UserAvatar? Me { get; set; }  


    void GoToContent(string id)
    {
        Nav.NavigateTo($"/content/{Message.RoomId}/{id}");
    }

    //async Task Edit()
    //{
    //    if (OnEdit.HasDelegate)
    //        await OnEdit.InvokeAsync(Message);
    //}

    //void EditTags()
    //{
    //    var parameters = new ModalParameters();
    //    parameters.Add("Message", Message);
    //    Modal.Show<MessageTags>("Message Tags", parameters);
    //}

    async Task Delete()
    {
        var truncatedMessage = new String(Message.Text.Take(20).ToArray()) + (Message.Text.Length > 20 ? "..." : "");

        if (!await JS.InvokeAsync<bool>("confirm", $"Are you sure you want to delete the message '{truncatedMessage}'?"))
            return;

        if (OnDelete.HasDelegate)
            await OnDelete.InvokeAsync(Message);
    }

    async Task DeleteAction(KeyboardEventArgs e)
    {
        if (e.Key == "Enter")
        {
            await Delete();
        }
    }
}
