@layout EmptyLayout

<div class="onboarding">
    @if (User != null)
    {
        <header>
            <Avatar User="User" />
        </header>

        <CascadingValue Value="User">
            <ul class="tabs">
                @foreach (var tab in Tabs)
                {
                    <li class="@(Tab == tab ? "selected" : "")" @onclick="(() => SetTab(tab))">@tab</li>
                }
            </ul>

            @switch (Tab)
            {
                case "Profile":
                    <AccountDetails OnUpdate="Save" />
                    break;
                case "Language":
                    <LanguageSelector OnUpdate="Save" />
                    break;
                case "Voice":
                    <VoiceSelector OnUpdate="Save" />
                    break;
                case "Color":
                    <ColorSelector OnUpdate="Save" />
                    break;
                case "Emoji":
                    <EmojiSelector OnUpdate="Save" />
                    break;
            }

            <button @onclick="Done">Done</button>
        </CascadingValue>
    }
</div>

@code {
    string Tab { get; set; } = "Profile";
    List<string> Tabs = new() { "Profile", "Language", "Voice", "Color", "Emoji" };
    UserAvatar? User;
    [Parameter] public EventCallback OnDone { get; set; }

    protected override async Task OnInitializedAsync()
    {
        User = await Api.GetUserAsync();
    }

    void SetTab(string tab) => Tab = tab;

    async Task Save()
    {
        User = await Api.UpdateUserAsync(User);
    }

    async Task Done()
    {
        await OnDone.InvokeAsync();
    }
}
