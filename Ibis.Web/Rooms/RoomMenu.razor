<button aria-label="Menu" class="room-menu" @onclick:stopPropagation="true" @onclick="ToggleDropdown" @onfocus="ToggleDropdown">
    <MoreVertical />

    @if (ShowDropdown)
    {
        <div class="dropdown--overlay" @onclick:stopPropagation="true" @onclick="ToggleDropdown"></div>
        <div class="dropdown" @onclick:stopPropagation="true">
            <ul>
                <li tabindex="0" @onclick="ShowEditModal" @onkeydown="KeyboardEdit">Edit Name</li>
                <li @onfocusout="ToggleDropdown" tabindex="0" @onclick="ShowDeleteModal" @onkeydown="KeyboardDelete">Delete Room</li>
            </ul>
        </div>
    }
</button>

@code {
    [Parameter] public GetRoomResponse Room { get; set; } = null!;
    bool ShowDropdown;

    async Task ShowDeleteModal()
    {
        var parameters = new ModalParameters();
        parameters.Add(nameof(DeleteModal.RoomId), Room.RoomId);
        var deleteModal = Modal.Show<DeleteModal>("DeleteModal", parameters);
        var result = await deleteModal.Result;

        if (result.Cancelled)
        {
            ToggleDropdown();
        }
    }

    async Task ShowEditModal()
    {
        var parameters = new ModalParameters();
        parameters.Add(nameof(EditModal.RoomId), Room.RoomId);
        parameters.Add(nameof(EditModal.Title), Room.Name);
        var editModal = Modal.Show<EditModal>("EditModal", parameters);

        var result = await editModal.Result;
        if (result.Cancelled)
        {
            ToggleDropdown();
        }
    }

    void ToggleDropdown()
    {
        ShowDropdown = !ShowDropdown;
    }

    public void Enter(KeyboardEventArgs e)
    {
        if (e.Key == "Enter")
        {
            ToggleDropdown();
        }
    }

    async Task KeyboardEdit(KeyboardEventArgs e)
    {
        if (e.Key == "Enter")
        {
            await ShowEditModal();
        }
    }

    async Task KeyboardDelete(KeyboardEventArgs e)
    {
        if (e.Key == "Enter")
        {
            await ShowDeleteModal();
        }
    }
}
