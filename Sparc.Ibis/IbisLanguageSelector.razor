<div class="ibis-language-selector" @ref="langSelection">
    <button @onclick="GetLanguages">
        @if (ChildContent != null)
        {
            @ChildContent
        }
        else
        {
            @SelectedLanguage
        }
    </button>
    @if (IsSelecting)
    {
        <div class="overlay" @onclick="CloseFromOverlay"></div>
        <ul class="ibis-ignore" @onkeydown="Close" style="left: @(X)px; top: @(Y)px">
            @foreach (var language in Languages!)
            {
                <li tabindex="0" @onclick="@(() => SetLanguage(language))" class="@(SelectedLanguage == language.Id ? "selected" : "")" @onkeydown="@((e) => KeyboardSelection(e, language))">
                    @language.NativeName
                    <aside>@language.DisplayName</aside>

                    @if (SelectedLanguage == language.Id)
                    {
                        <div class="right">
                            <img src="icons/Check.svg" />
                        </div>
                    }
                </li>
            }
        </ul>
    }
</div>

@code {
    [Parameter] public string SelectedLanguage { get; set; } = null!;
    [Parameter] public EventCallback<string> OnLanguageSelected { get; set; }
    [Parameter] public RenderFragment? ChildContent { get; set; }
    [Parameter] public bool IsSelecting { get; set; }
    double X;
    double Y;
    ICollection<Language>? Languages;
    ElementReference langSelection;

    protected override async Task OnInitializedAsync()
    {
        if (IsSelecting)
        {
            Languages = await Api.GetLanguagesAsync();
        }
    }

    async Task GetLanguages(MouseEventArgs args)
    {
        if (Languages == null)
            Languages = await Api.GetLanguagesAsync();

        IsSelecting = !IsSelecting;
        X = args.ClientX;
        Y = args.ClientY;

        await langSelection.FocusAsync();
    }

    async Task SetLanguage(Language language)
    {
        SelectedLanguage = language.Id;
        IsSelecting = false;
        await OnLanguageSelected.InvokeAsync(language.Id);
    }

    async Task KeyboardSelection(KeyboardEventArgs e, Language language)
    {
        if (e.Key == "Enter")
        {
            await SetLanguage(language);
        }
    }

    async Task CloseFromOverlay() => IsSelecting = false;

    void Close(KeyboardEventArgs e)
    {
        if (e.Key == "Escape")
        {
            IsSelecting = false;
            
        }
    }
}