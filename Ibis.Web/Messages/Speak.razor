@inherits RealtimeComponent

<section class="speak">
    <div class="input">
        @if (IsRecording == true)
        {
            <h3>Recording...</h3>
            <audio src="/sounds/beep_up.wav" autoplay />
            <p>@Text</p>
        }
        if (IsRecording == false)
        {
            <audio src="/sounds/beep_down.wav" autoplay />
            <textarea @bind="Text" @bind:event="oninput" @onkeydown=MaybeSendText />
            <div class="buttons">
                <button @onclick="SendText" aria-label="Post Message" class="primary">
                    Post
                    <SendIcon />
                </button>
            </div>
        }
        <button class="close" @onclick="Cancel">
            <img src="/icons/Close.svg" />
        </button>
    </div>
</section>

@using Blazored.Modal;
@inject IModalService Modal;

@code {
    string? Text;
    bool? IsRecording;

    [CascadingParameter] BlazoredModalInstance ModalInstance { get; set; } = default!;

    protected override async Task OnInitializedAsync()
    {
        var sessionId = await Api.HearMessageAsync();
        if (sessionId != null)
            IsRecording = true;

        On<SpeechRecognizing>(x =>
        {
            if (x.SessionId == sessionId)
                Text = x.Text;
        });

        On<SpeechRecognized>(x =>
        {
            if (x.SessionId == sessionId)
            {
                Text = x.Text;
                IsRecording = false;
            }
        });
    }

    async Task Cancel() => await ModalInstance.CancelAsync();

    async Task MaybeSendText(KeyboardEventArgs args)
    {
        if (args.Code == "Enter")
            await SendText();
    }

    async Task SendText()
    {
        await ModalInstance.CloseAsync(ModalResult.Ok(Text));
    }
}
