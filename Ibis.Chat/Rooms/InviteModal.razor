@inherits SparcModal

<div class="invite-block">
    <div class="invite-search">
        <label>
            Email Address
            <input placeholder="Email" @bind="InviteEmail" @ref=EmailInput />
        </label>
        <label>
            Their Native Language
            @if (Languages != null)
            {
                <select @bind="InviteLanguage">
                    <option value="">Select a Language</option>
                    @foreach (var language in Languages)
                    {
                        <option value="@language.Id">@language.Id - @language.NativeName</option>
                    }
                </select>
            }
        </label>
        <aside>Don't know their preferred language? You can skip this, and they can choose their language when they accept the invite.</aside>
        <button @onclick="SendInvite" class="primary">Send the Invite</button>
    </div>
    <div class="invite-users">
        <h5>Participants</h5>
        @foreach (var user in Users.OrderByDescending(x => x.IsOnline))
        {
            <Avatar User="user" />
        }
    </div>
</div>


@code {
    [Parameter] public GetRoomResponse Room { get; set; } = null!;
    List<UserAvatar> Users { get; set; } = new();
    ICollection<Language>? Languages;
    ElementReference EmailInput;

    string? InviteEmail;
    string? InviteLanguage;
    List<string> NewEmails = new List<string>();

    protected override async Task OnInitializedAsync()
    {
        Users = Room.Users.ToList();
        Languages = await Api.GetLanguagesAsync();
    }

    void ChangeLanguage(string language)
    {
        InviteLanguage = language;
    }

    async Task SendInvite()
    {
        if (!string.IsNullOrWhiteSpace(InviteEmail))
        {
            NewEmails.Add(InviteEmail);
            var newUser = await Api.InviteUserAsync(new InviteUserRequest { RoomId = Room.RoomId, Email = InviteEmail, Language = InviteLanguage });
            Users.Add(newUser);
            InviteEmail = "";
            await EmailInput.FocusAsync();
        }
    }

    async Task Done() => await Ok();
}