@page "/rooms/{Id}"

<RealtimeHub Url="@HubUrl" OnConnected="AddToRoom">
    <section class="room">
        <header>
            @if (RoomInfo != null)
            {
                <h2>
                    @RoomInfo.Name
                </h2>
                <InviteUser RoomId="@RoomInfo.RoomId" />
                <button @onclick="@(() => DownloadText("TXT"))" aria-label="Download Text" class="select-upload" title="Download text transcript">
                    <DownloadIcon />
                </button>
                <button @onclick="@(() => DownloadText("SRT"))" aria-label="Download Subtitles" class="select-upload" title="Download subtitles">
                    <DownloadIcon />
                </button>
                <button @onclick="DownloadAudio" aria-label="Download Audio" class="select-upload" title="Download audio transcript">
                    <DownloadIcon />
                </button>
            }
        </header>
        @if (RoomInfo != null)
        {
            <MessageList Room="RoomInfo" />
        }
    </section>
</RealtimeHub>

@code {
    [Parameter] public string Id { get; set; } = null!;

    GetRoomResponse? RoomInfo;
    string HubUrl = "";

    protected override async Task OnInitializedAsync()
    {
        HubUrl = Config["ApiUrl"] + "/rooms";
        RoomInfo = await Api.JoinRoomAsync(new JoinRoomRequest { RoomId = Id });
    }

    async Task AddToRoom(HubConnection connection)
    {
        await connection.InvokeAsync("AddToRoom", Id);
    }

    async Task DownloadAudio()
    {
        var audio = await Api.GetRoomAudioAsync(new GetRoomAudioRequest { RoomId = Id });
        await JS.InvokeVoidAsync("triggerFileDownload", audio.Url);
    }

    async Task DownloadText(string format)
    {
        var result = await Api.GetRoomTextAsync(new GetRoomTextRequest { RoomId = Id, Format = format });

        byte[] bytes = Encoding.ASCII.GetBytes(result.Text);
        Stream fileStream = new MemoryStream(bytes);

        var fileName = $"{RoomInfo!.Name}.{format.ToLower()}";
        foreach (char c in System.IO.Path.GetInvalidFileNameChars())
        {
            fileName = fileName.Replace(c, '_');
        }

        using var streamRef = new DotNetStreamReference(stream: fileStream);
        await JS.InvokeVoidAsync("downloadFileFromStream", fileName, streamRef);
    }

    void UpdateName()
    {
        // await Connection!.SendAsync("UpdateRoom", RoomInfo);
    }
}
