@inherits LayoutComponentBase

<CascadingValue Value="User">
    <nav class="nav--support">
        <div class="nav--container">
            <div class="nav--container-left">
                <h1>
                    <a href="/" @onclick=RefreshLanding><img class="logo" src="images/IbisSupport_logo-full.png" /></a>
                </h1>
            </div>
            <div class="nav--container-right">
                @*<a href="/pricing">Pricing</a>*@
                <button class="contact-us">Contact Us</button>
                <button class="mobile-menu--btn @ShowMobileMenu" @onclick=OpenMobileMenu><img src="icons/menu-secondary.png" /></button>
                <button class="mobile-menu--close @ShowMobileMenu" @onclick=CloseMobileMenu><img src="icons/close-icon.svg" /></button>
            </div>
        </div>
        <div class="mobile-menu--overlay @ShowMobileMenu" @onclick=CloseMobileMenu></div>
        <div class="mobile-menu @ShowMobileMenu">
            <div class="mobile-menu--links">
                <button class="contact-us">Contact Us</button>

            </div>
        </div>
    </nav>

    <main class="main--support-landing">
        @Body
    </main>

    <Footer />
</CascadingValue>

@inject AuthenticationStateProvider AuthenticationStateProvider
@inject NavigationManager Navigation

@code {
    UserAvatar? User;
    bool isUserBeingGot;
    string ShowMobileMenu;

    protected override async Task OnParametersSetAsync()
    {
        if (User != null)
            return;

        await UpdateUser(AuthenticationStateProvider.GetAuthenticationStateAsync());

        AuthenticationStateProvider.AuthenticationStateChanged += async (state) => await UpdateUser(state);
    }

    async Task UpdateUser(Task<AuthenticationState> state)
    {
        var user = (await state).User;

        if (User == null && !isUserBeingGot && user.Identity?.IsAuthenticated == true)
        {
            isUserBeingGot = true;
            User = await Api.GetUserAsync();
            if (User != null && User.Language == null)
            {
                EditAvatar();
            }

            StateHasChanged();
            isUserBeingGot = false;
        }
    }

    void EditAvatar()
    {
        Modal.Show<Onboarding.Index>("Edit Your Avatar", new ModalOptions { HideHeader = true, Size = ModalSize.Automatic });
    }

    void RefreshLanding()
    {
        Navigation.NavigateTo("/", forceLoad: true);
    }

    void OpenMobileMenu()
    {
        ShowMobileMenu = "open";
    }

    void CloseMobileMenu()
    {
        ShowMobileMenu = "";
    }
}