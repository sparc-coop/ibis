@inherits SparcModal
@using System.Globalization;

<div class="add-funds-modal">
    @if (PaymentIntent != null)
    {
        @if(Balance != null)
        {
            <div class="show-balance">
                Current balance: @Math.Floor(Balance.Value.TotalMinutes).ToString("N0") min
            </div>
        }
        <ul>
            @foreach (var amount in PaymentIntent.Amounts)
            {
                <li class="@(SelectedPackage?.Amount == amount.Amount ? "selected" : "")" @onclick="(() => ChoosePackage(amount))">
                    <header>@amount.Amount.ToString("C0")</header>
                    <aside>@TimeSpan.FromTicks(amount.Ticks).TotalMinutes minutes</aside>
                </li>
            }
        </ul>

        <form>
            <div id="payment-element"></div>
            @if (SelectedPackage != null)
            {
                <button type="button" @onclick=Pay>
                    Add @TimeSpan.FromTicks(SelectedPackage.Ticks).TotalMinutes minutes
                </button>
            }
        </form>
    }
</div>


@code {
    [Parameter] public string? PaymentIntentClientSecret { get; set; }
    List<double> Amounts = new();
    TicksPackage? SelectedPackage;
    PaymentIntentResponse? PaymentIntent;
    TimeSpan? Balance;

    protected override async Task OnInitializedAsync()
    {
        var ri = new RegionInfo(System.Threading.Thread.CurrentThread.CurrentUICulture.LCID);
        PaymentIntent = await Api.CreatePaymentIntentAsync(new PaymentIntentRequest { Amount = 0, Currency = ri.ISOCurrencySymbol, Id = PaymentIntentClientSecret });
        var ticks = await Api.GetUserBalanceAsync();
        Balance = TimeSpan.FromTicks(ticks);
    }

    async Task ChoosePackage(TicksPackage package)
    {
        SelectedPackage = package;
        await UpdatePaymentAsync();
    }

    async Task UpdatePaymentAsync()
    {
        if (SelectedPackage == null)
            return;

        var request = new PaymentIntentRequest
            {
                Id = PaymentIntent?.Id,
                Amount = SelectedPackage.Amount,
                Currency = PaymentIntent?.Currency
            };

        PaymentIntent = await Api.CreatePaymentIntentAsync(request);
        await JS.InvokeVoidAsync("initStripe", PaymentIntent.ClientSecret, "#payment-element");
    }

    async Task Pay()
    {
        // Loading indicator
        var result = await JS.InvokeAsync<string>("confirmStripe", Nav.Uri);
        await Ok();
    }
}