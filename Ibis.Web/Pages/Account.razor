@page "/account"
@layout DashLayout
@attribute [Authorize]

<div class="account container">
	<h3>User Settings</h3>
	<div class="account--left">
		@if(User != null)
		{
		<h3>Edit profile information</h3>
			<input placeholder="@(User.FullName ?? Name)"/>
@*			<input placeholder="@(User.Email ?? Email)"/>*@
		<label>Primary Language</label>
		<div class="switch-lang">
            <select @bind="@User.Language">
			     <option disabled>Select Language</option>
			     @foreach(var item in LanguageList.Languages)
			     {
				     <option value="@item.Key">@item.Value.Name</option>
			     }
		     </select>
        </div>
		<button @onclick="UpdateUser">Save</button>
		}
	</div>

	<div>
		@if(userPayment == true)
		{
			<h3>Save credit card for future billing</h3>
		<form id="payment-form">
		  <div id="payment-element">
			<!-- Elements will create form elements here -->
		  </div>
		  <button id="submit">Submit</button>
		  <div id="error-message">
			<!-- Display error message to your customers here -->
		  </div>
		</form>
		} 
@*
		@if(userPayment == false) {
			<button class="edit-payment">Update Saved Payment Information</button>
		}*@
	</div>
</div>

@inject IJSRuntime JS

@code {
    private GetUserResponse User;
    public string Name = "Full Name";
    private string Email = "Email";
    bool userPayment = false;
    GetLanguageListResponse LanguageList;


    protected override async Task OnInitializedAsync()
    {
        LanguageList = await PublicApi().GetLanguageListAsync();

        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;
        if(user.Identity.IsAuthenticated)
        {
            User = await Api.GetUserAsync();
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        string clientSecret = await Api.CreateStripeCustomerAsync(new CreateStripeCustomerRequest { UserId = User.Id });
        if (clientSecret != "current-customer") {
            userPayment = true;
            await JS.InvokeAsync<string>("setPayment", clientSecret);
        }
    }

   private async void UpdateUser() => await Api.UpdateUserAsync(new UpdateUserRequest { UserId = User.Id, FullName = User.FullName, LanguageId = User.Language });
}