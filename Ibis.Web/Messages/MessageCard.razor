@using System.Web
@inherits RealtimeComponent
@implements IDisposable

<article class="message-card ibis-ignore" @onclick="GoToSubroom">
    <Avatar User="Message.User" SpillBackground="true" />
    @if (Me?.Id == Message.User.Id)
    {
        <ul class="actions">
            <li class="actions-tags" @onclick=EditTags>
                Tags
            </li>
            <li @onclick=Edit>
                Edit
            </li>
            <li @onclick=Delete>
                Delete
            </li>
        </ul>
    }
    <Sparc.Ibis.IbisContent Message="Message" />
</article>

@code {
    [Parameter] public Message Message { get; set; } = new();
    [Parameter] public EventCallback<Message> OnEdit { get; set; }
    [Parameter] public EventCallback<Message> OnDelete { get; set; }
    [CascadingParameter] public UserAvatar? Me { get; set; }
    AudioMessage? Audio { get; set; }
    long? Offset;
    System.Timers.Timer? AudioTimer;

    protected override async Task OnInitializedAsync()
    {
        Audio = Message.Audio;
        await On<MessageAudioChanged>(Message.RoomId + "|" + Message.Language, async x =>
            {
                if (x.Message.Id == Message.Id)
                {
                    Audio = x.Message.Audio;
                    await Play();
                }
            });
    }

    void GoToSubroom()
    {
        //if (Message != null)
        //    Nav.NavigateTo($"/rooms/{Message.SubroomId}");
    }

    bool WordIsActive(Word word) => Offset != null && word.Offset < Offset && Offset < (word.Offset + word.Duration);

    List<MarkupString> MessageHtml => Message?.Text == null
        ? new()
        : Message.Text
            .Split(new string[] { "\r\n", "\r", "\n" }, StringSplitOptions.None)
            .Where(x => !string.IsNullOrWhiteSpace(x))
            .Select(x => new MarkupString(System.Web.HttpUtility.HtmlEncode(x)))
            .ToList();

    async Task Play()
    {
        if (Audio?.Url != null)
        {
            Offset = 0;
            AudioTimer = new(100);
            AudioTimer.Elapsed += (source, e) =>
            {
                if (Offset > Audio.Duration)
                {
                    AudioTimer.Stop();
                    Offset = null;
                }
                else
                {
                    Offset += 100;
                }
                InvokeAsync(StateHasChanged);
            };
            AudioTimer.Start();
            await JS.InvokeVoidAsync("playAudio", Audio.Url);
        }
    }

    async Task Edit()
    {
        if (OnEdit.HasDelegate)
            await OnEdit.InvokeAsync(Message);
    }

    async Task EditTags()
    {
        var parameters = new ModalParameters();
        parameters.Add("Message", Message);
        Modal.Show<MessageTags>("Message Tags", parameters);
    }

    async Task Delete()
    {
        var truncatedMessage = new String(Message.Text.Take(20).ToArray()) + (Message.Text.Length > 20 ? "..." : "");

        if (!await JS.InvokeAsync<bool>("confirm", $"Are you sure you want to delete the message '{truncatedMessage}'?"))
            return;
        
        if (OnDelete.HasDelegate)
            await OnDelete.InvokeAsync(Message);
    }

    public void Dispose()
    {
        AudioTimer?.Dispose();
    }
}
