@using Sparc.Blossom.Authentication;
@using Sparc.Ibis;

<CascadingValue Value="User">
    <div class="user-menu">
        <AuthorizeView>
            <Authorized>
                @if (User != null)
                {
                    <button class="toggle-usermenu">
                        <img src="images/1.png" />
                        <ExpandIcon />
                    </button>
                }
            </Authorized>
            <NotAuthorized>
                <button class="login" @onclick="Login">Login</button>
            </NotAuthorized>
        </AuthorizeView>
    </div>

    <nav>
        <AuthorizeView>
            <Authorized>
                @if (User != null)
                {
                    <div class="navmenu">
                        <header class="navmenu--header">
                            <a href="/dashboard"><img class="logo" src="images/logo.png" /></a>
                            <button class="toggle-menu" @onclick="ToggleNav"><ExpandIcon /></button>
                        </header>
                        <div class="navmenu--search">
                            @if (NavSize == "nav-collapsed")
                            {
                                <span @onclick="ToggleNav">
                                    <SearchIcon />
                                </span>
                            } else
                            {
                                <SearchIcon />
                                <input type="text" placeholder="Search..." />
                            }
                        </div>
                        @if (NavSize == "nav-collapsed")
                        {
                            <div class="navmenu--home">
                                <a href="/dashboard"><HomeIcon /></a>
                            </div>
                        }
                        <div class="navmenu--websites">
                            <ul>
                                @if (NavSize == "nav-expanded")
                                {
                                    <li @onclick=@(e =>SelectWebsite(""))>
                                        <p class="title">All Websites</p>
                                    </li>
                                }
                                <li @onclick=@(e =>SelectWebsite(""))>
                                    <img src="images/Sparc-image.png" />
                                    <p class="title">Sparc (sparc.coop)</p>
                                </li>
                                <li @onclick=@(e =>SelectWebsite(""))>
                                    <img src="images/Blossom-image.png" />
                                    <p class="title">Blossom</p>
                                </li>
                            </ul>
                        </div>
                        <button class="add-website"><AddIcon /><span> Add Website</span></button>
                    </div>
                }
            </Authorized>
        </AuthorizeView>
    </nav>
</CascadingValue>

@inject AuthenticationStateProvider AuthenticationStateProvider

@code {
    [Parameter]
    public EventCallback<bool> OnCollapseNav { get; set; }

    protected bool NavIsCollapsed { get; set; }
    string NavSize = "nav-expanded";

    UserAvatar? User;
    bool ShowMenu;
    bool IsRoom;
    string HubUrl => Config["Blossom:Authority"] + "/hub";
    UserBalance? BalanceComponent;
    public string LoginLink = "https://localhost:7117/_login?returnUrl=https%3A%2F%2Flocalhost%3A7083";

    void Login()
    {
        Nav.NavigateTo(LoginLink);
    }

    protected override async Task OnParametersSetAsync()
    {
        IsRoom = Nav.Uri.Contains("rooms/");

        if (User != null)
            return;

        await UpdateUser(AuthenticationStateProvider.GetAuthenticationStateAsync());

        AuthenticationStateProvider.AuthenticationStateChanged += async (state) => await UpdateUser(state);
    }

    void OpenMenu() => ShowMenu = !ShowMenu;

    void EditAvatar()
    {
        ShowMenu = false;
        Modal.Show<Onboarding.Index>("Edit Your Avatar", new ModalOptions { HideHeader = true, Size = ModalSize.Automatic });
    }

    async Task AddFunds() => await BalanceComponent.AddFunds();

    bool isUserBeingGot;
    async Task UpdateUser(Task<AuthenticationState> state)
    {
        var user = (await state).User;

        if (User == null && !isUserBeingGot && user.Identity?.IsAuthenticated == true)
        {
            isUserBeingGot = true;
            User = await Api.GetUserAsync();
            if (User != null && User.Language == null)
            {
                EditAvatar();
            }

            StateHasChanged();
            isUserBeingGot = false;
        }
    }

    void GoToRooms() => Nav.NavigateTo("/rooms");

    private async Task Logout()
    {
        await (AuthenticationStateProvider as BlossomAuthenticationStateProvider)!.LogoutAsync();
    }

    void KeyboardMenu(KeyboardEventArgs e)
    {
        if (e.Key == "Enter")
        {
            OpenMenu();
        }
    }

    protected async Task ToggleNav()
    {
        NavIsCollapsed = !NavIsCollapsed;

        if (NavIsCollapsed == true)
            NavSize = "nav-collapsed";
        else
            NavSize = "nav-expanded";

        await OnCollapseNav.InvokeAsync(NavIsCollapsed);
    }

    void SelectWebsite(string Id)
    {
        Nav.NavigateTo("/dashboard");
    }
}