<section class="upload modal">
    <button class="close" @onclick="Cancel">
        <img src="/icons/Close.svg"/>
    </button>
    <div class="input">
        <h4>Upload a file</h4>
        <div class="photo-upload">
			<InputFile type="file" accept="audio/wav, video/*" name="UploadFileInput" OnChange="@OnInputFileChange"/>
			<img class="upload-icon" src="/icons/upload.png" />
			<p>
				<span>Click to upload</span> or drag and drop
			</p>
		</div>
    </div>
    @ErrorMessageHTML
    <button @onclick="Submit" class="primary">Upload</button>
    @if(loading == true)
    {
         <div class="loading"></div>   
    }
</section>

@code {
    [Parameter] public string? RoomId { get; set; }
    [Parameter] public string? Language { get; set; }
    MemoryStream? ms;
    string? fileName;
    bool FileInputEmptyOnSubmit = false;
    MarkupString ErrorMessageHTML = new();
    bool loading = false;

    [CascadingParameter] BlazoredModalInstance ModalInstance { get; set; } = default!;

    void ErrorMessage()
    {
        if (FileInputEmptyOnSubmit)
        {
            ErrorMessageHTML = new("<div class='error' style='color: red;'>**File cannot be empty</div>");
        } else {
            ErrorMessageHTML = new();
        }
    }

    async Task OnInputFileChange (InputFileChangeEventArgs e)
    {
        ms = new MemoryStream();
        fileName = e.File.Name;
        await e.File.OpenReadStream(maxAllowedSize: 50000000).CopyToAsync(ms);

        FileInputEmptyOnSubmit = !FileInputEmptyOnSubmit;
        ErrorMessage();
    }

    void ShowConfirmOrEditTextModal(string roomId, string language, List<Message> messages, byte[] bytes)
    {
        var parameters = new ModalParameters();
        parameters.Add(nameof(ConfirmOrEditText.RoomId), roomId);
        parameters.Add(nameof(ConfirmOrEditText.Language), language);
        parameters.Add(nameof(ConfirmOrEditText.MessageList), messages);
        parameters.Add(nameof(ConfirmOrEditText.Bytes), bytes);

        Modal.Show<ConfirmOrEditText>("Review Before Sending", parameters);
    }

    async Task Submit()
    {
        loading = true;
        if(ms != null)
        {
            FileInputEmptyOnSubmit = false;
            var bytes = ms.ToArray();
            var messages = await Api.UploadFileAsync(new UploadFileRequest { RoomId = RoomId, Language = Language, Bytes = bytes, FileName = fileName });
            foreach(var message in messages)
            {
                message.ModifiedText = message.Text;
            }
            ShowConfirmOrEditTextModal(RoomId!, Language!, messages.ToList(), bytes);
            await ModalInstance.CloseAsync(ModalResult.Ok(true));
        } else
        {
            FileInputEmptyOnSubmit = true;
            ErrorMessage();
        }
        loading = false;
    }

    void Cancel()
    {
        ModalInstance.CancelAsync();
    }
}