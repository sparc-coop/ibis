@using System.Threading.Channels
@inherits RealtimeComponent

<form class="new-message @(SelectedMessage != null ? "editing" : "")" @onsubmit=SendText>
@*    @if (Me?.LanguageIsRTL == false)
    {
        <MarkdownEditorComponent></MarkdownEditorComponent>
        <textarea aria-label="Message" type="text" class="ibis-ignore" disabled="@IsListening" placeholder="Type something..." @ref=TextArea @bind="Text" @bind:event="oninput" @onkeydown=MaybeSendText @onkeydown:preventDefault="preventDefault" />
    }
    else
    {
        <MarkdownEditorComponent></MarkdownEditorComponent>
      <textarea aria-label="Message" type="text" class="ibis-ignore" dir="rtl" disabled="@IsListening" placeholder="Type something..." @ref=TextArea @bind="Text" @bind:event="oninput" @onkeydown=MaybeSendText @onkeydown:preventDefault="preventDefault" />
    }*@
    
<div class="MarkdownEditorComponent ibis-ignore" aria-label="Message">
    @if (Me?.LanguageIsRTL == false)
    {
         <MarkdownEditor ValueHTMLChanged="@OnMarkdownValueHTMLChanged"
        @bind-Value="@markdownValue" />   @*@onkeydown= MaybeSendText*@
        } else
    {
            <MarkdownEditor ValueHTMLChanged="@OnMarkdownValueHTMLChanged"
        @bind-Value="@markdownValue" 
        dir="rtl"/>
    }

    <hr />    
    <div class="markdown-result">
        @((MarkupString)markdownHtml)
    </div>
</div>
    
        <div class="send">
@*            @if (IsSpeak)
            {
                <button type="button" @onclick="@(() => BeginListeningAsync(false))" aria-label="Speak">
                    <RecordIcon />
                    @if (IsListening)
                    {
                        <span>Listening...</span>
                    }
                    else
                    {
                        <span>Speak</span>
                        <aside>[hold Ctrl]</aside>
                    }
                </button>
            }
            else
            {
                if (SelectedMessage != null)
                {
                    <button type="button" class="cancel" @onclick=CancelEdit>
                        Cancel
                    </button>
                }
                <button type="submit" @onclick="SendText" aria-label="Send">
                    <SendIcon />
                    <span>@(SelectedMessage == null ? "Send" : "Save")</span>
                    <aside>[Enter]</aside>
                </button>
            }*@
            @if (SelectedMessage != null)
            {
            <button type="button" class="cancel" @onclick=CancelEdit>
                Cancel
            </button>
            }
            <button type="submit" @onclick="SendText" aria-label="Send">
                <SendIcon />
                <span>Save</span>
                <aside>[Enter]</aside>
            </button>
        </div>

        @if (IsListening)
        {
            <div class="message-subtitles">
                @if (string.IsNullOrWhiteSpace(TextPreview))
                {
                    <aside>Listening...</aside>
                }
                else
                {
                    <span>@TextPreview</span>
                }
            </div>
        }

    <footer>
        <button @onclick="ShowUploadModal" class="select-upload" title="Upload file">
            <UploadIcon />
            Upload a file
        </button>
    </footer>
</form>

@code {
    [Parameter] public GetRoomResponse Room { get; set; } = null!;
    [Parameter] public string? LanguageString { get; set; }
    [Parameter] public Message? SelectedMessage { get; set; }
    [Parameter] public EventCallback OnDoneEditing { get; set; }
    [Parameter] public EventCallback<Message> OnSetMessage { get; set; }
    [CascadingParameter] public UserAvatar? Me { get; set; }
    string? Text;
    string? TextPreview;
    string? Dialect;
    ElementReference TextArea;
    bool IsSpeak => IsListening || string.IsNullOrWhiteSpace(Text);
    bool preventDefault = false;
    bool LiveMode = true;
    string markdownValue = "#Markdown Editor\nThis is a test";
    string markdownHtml;

    protected override async Task OnParametersSetAsync()
    {
        if (SelectedMessage != null)
        {
            Text = SelectedMessage.Text;
            markdownHtml = markdownValue = Markdig.Markdown.ToHtml(SelectedMessage.Html ?? string.Empty);
        }
    }


    Task OnMarkdownValueChanged(string value)
    {
        return Task.CompletedTask;
    }

    async Task OnMarkdownValueHTMLChanged(string value)
    {
        markdownHtml = value;
        Text = markdownHtml;
    }

    async Task MaybeSendText(KeyboardEventArgs args)
    {
        if (args.Code == "Enter" && !args.ShiftKey)
        {
            preventDefault = true;
            await SendText();
        }
        else
        {
            preventDefault = false;
        }
    }

    async Task SendText()
    {
        var text = Text?.Trim('\r', '\n', ' ');
        Text = "";
        StateHasChanged();

        var newMessage = await Api.TypeMessageAsync(new TypeMessageRequest { RoomId = Room.RoomId, Text = text, MessageId = SelectedMessage?.Id });
        //await TextArea.FocusAsync();

        await OnSetMessage.InvokeAsync(newMessage);
        await OnDoneEditing.InvokeAsync();
    }

    async Task CancelEdit()
    {
        Text = "";
        await OnDoneEditing.InvokeAsync();
    }

    void ShowUploadModal()
    {
        var parameters = new ModalParameters();
        parameters.Add(nameof(Upload.RoomId), Room.RoomId);
        Modal.Show<Upload>("Upload", parameters);
    }

    DateTime? AudioStartTime;
    Channel<byte[]>? AudioChannel;
    DotNetObjectReference<NewMessage>? objRef;
    bool IsListening;

    [JSInvokable]
    public async Task BeginListeningAsync(bool liveMode)
    {
        if (AudioStartTime != null)
        {
            await StopListeningAsync();
            return;
        }

        if (!string.IsNullOrWhiteSpace(Text))
            return;

        LiveMode = liveMode;
        if (Dialect == null)
        {
            var parameters = new ModalParameters();
            parameters.Add("Tab", "Voice");
            var modal = Modal.Show<Onboarding.Index>("Edit Your Avatar", parameters, new ModalOptions { HideHeader = true, Size = ModalSize.Automatic });
            var result = await modal.Result;
            return;
        }

        objRef = DotNetObjectReference.Create(this);
        AudioStartTime = DateTime.UtcNow;
        AudioChannel = Channel.CreateUnbounded<byte[]>(); ;
        await JS.InvokeVoidAsync("beginListening", objRef);

        IsListening = true;
        StateHasChanged();

        On<SpeechRecognizing>(x =>
        {
            TextPreview = x.Text;
            StateHasChanged();
        });
        On<SpeechRecognized>(x =>
        {
            if (TextPreview != null)
            {
                Text += " " + x.Text;
                TextPreview = null;
            }
            StateHasChanged();
        });

        if (Hub?.State == HubConnectionState.Connected)
            await Hub.SendAsync("ReceiveAudio", AudioChannel.Reader);
    }

    async Task StopListeningAsync()
    {
        await JS.InvokeVoidAsync("stopListening");
        AudioStartTime = null;
        AudioChannel?.Writer.Complete();
        objRef = null;
        IsListening = false;
        TextPreview = null;

        StateHasChanged();

        await TextArea.FocusAsync();
    }

    [JSInvokable]
    public async Task AudioReceived(byte[] audio)
    {
        if (!LiveMode && DateTime.UtcNow - AudioStartTime > TimeSpan.FromSeconds(30))
        {
            await StopListeningAsync();
            return;
        }

        if (AudioChannel != null)
            await AudioChannel!.Writer.WriteAsync(audio);
    }
}
