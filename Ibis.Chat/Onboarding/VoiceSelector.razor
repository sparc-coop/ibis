<div class="voice-selector">
    <h2>
        Ibis will use this voice to speak for you, and to better understand your dialect so it can accurately convert your speech. So make sure the voice you choose represents you! If you're not sure, you can always change it.
    </h2>

    @if (SelectedDialect == null)
    {
        <h3>
            Select your gender
        </h3>
        <ul class="genders">
            <li tabindex="0" @onclick="@(() => SetGender("Female"))" class="@(User.Gender == "Female" ? "selected" : "")" @onkeydown="@((e) => KeyboardSelection(e, "Female"))">
                Female
            </li>
            <li tabindex="0" @onclick="@(() => SetGender("Male"))" class="@(User.Gender == "Male" ? "selected" : "")" @onkeydown="@((e) => KeyboardSelection(e, "Male"))">
                Male
            </li>
        </ul>

        @if (User.Gender != null && Dialects != null && User.Voice == null)
        {
            <h3>
                Select your dialect
            </h3>
            <ul class="dialects">
                @foreach (var dialect in Dialects)
                {
                    <li tabindex="0" @onclick="@(() => SetDialect(dialect))" class="@(SelectedDialect == dialect ? "selected" : "")" @onkeydown="@((e) => KeyboardSelection(e, dialect))">
                        @dialect.NativeName

                        @if (SelectedDialect == dialect)
                        {
                            <div class="right">
                                <img src="icons/Check.svg" />
                            </div>
                        }
                    </li>
                }
            </ul>
        }
    }
    else
    {
        <h3>Your Dialect</h3>
        <h4>
            @User.Gender, @SelectedDialect.NativeName
            <button class="secondary" @onclick="ClearDialect">Change</button>
        </h4>

        <h3>Select your voice</h3>
        <ul class="voice-list ibis-ignore">
            @foreach (var voice in SelectedDialect.Voices.Where(x => x.Gender == User.Gender))
            {
                <li @onclick="(() => SetVoice(voice))" class="@(User.Voice == voice.ShortName ? "selected" : "")">
                    @voice.DisplayName
                    <aside class="right">
                        <PlayIcon />
                    </aside>
                </li>
            }
        </ul>
    }

    @if (AudioPreviewUrl != null)
    {
        <audio autoplay src="@AudioPreviewUrl" />
    }
</div>

@code {
    [CascadingParameter] public UserAvatar User { get; set; } = null!;
    IEnumerable<Dialect>? Dialects { get; set; }
    Dialect? SelectedDialect { get; set; }
    string? AudioPreviewUrl { get; set; }

    protected override async Task OnInitializedAsync()
    {
        var languages = await Api.GetLanguagesAsync();
        Dialects = languages.Where(x => x.Id == User.Language).SelectMany(x => x.Dialects).ToList();
        SelectedDialect = Dialects.FirstOrDefault(x => x.Language + "-" + x.Locale == User.Dialect);
    }

    async Task SetDialect(Dialect dialect)
    {   
        SelectedDialect = dialect;
        await SetVoice(SelectedDialect.Voices.Where(x => x.Gender == User.Gender).OrderBy(x => Guid.NewGuid()).First());
    }

    void SetGender(string gender)
    {
        ClearDialect();
        User.Gender = gender;
    }
    void ClearDialect()
    {
        SelectedDialect = null;
        User.Gender = null;
        User.Voice = null;
    }

    async Task SetVoice(Voice voice)
    {
        User.Voice = voice.ShortName;
        var result = await Api.ChangeVoiceAsync(new ChangeVoiceRequest { Language = User.Language, VoiceName = voice.ShortName });

        AudioPreviewUrl = null;
        StateHasChanged();

        AudioPreviewUrl = result.PreviewAudioUrl;
    }

    void KeyboardSelection(KeyboardEventArgs e, Dialect dialect)
    {
        if (e.Key == "Enter")
        {
            SetDialect(dialect);
        }
    }

    void KeyboardSelection(KeyboardEventArgs e, string gender)
    {
        if (e.Key == "Enter")
        {
            SetGender(gender);
        }
    }
}
