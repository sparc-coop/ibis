@layout EmptyLayout

@if (User != null)
{
    <div class="onboarding">
        <Avatar User="User" />
        
        @switch (Step)
        {
            case 1:
                <AccountDetails User="User" />
                break;
            case 2:
                <LanguageSelector User="User" />
                break;
            case 3:
                <VoiceSelector User="User" />
                break;
            case 4:
                <EmojiSelector User="User" />
                break;
            case 5:
                <SetupComplete />
                break;
        }

        <div class="bottom-nav">
            <div class="actions">
                <div class="steps">
                    @for (var i = 1; i <= 5; i++)
                    {
                        <div class="step-circle @(Step >= i ? "step-active" : "")">
                            <i class="material-icons-outlined">@(Step > i ? "check" : "adjust")</i>
                        </div>
                        @if (i < 5)
                        {
                            <hr class="step-line" />
                        }
                    }
                </div>
                <div class="buttons">
                    @if (Step > 1)
                    {
                        <button class="skip" @onclick="GoToPrevious">Back</button>
                    }
                    <button class="next" @onclick="GoToNext">@(Step == 5 ? "Done" : "Next")</button>
                </div>
            </div>
        </div>
    </div>
}

@code {
    int Step = 1;
    UserAvatar? User;

    protected override async Task OnInitializedAsync()
    {
        User = await Api.GetUserAsync();
    }

    private async Task UpdateUser() => await Api.UpdateUserAsync(User);

    async Task GoToPrevious()
    {
        await UpdateUser();
        if (Step > 1)
        {
            Step--;
        }
    }

    async Task GoToNext()
    {
        await UpdateUser();
        if (Step < 4)
        {
            Step++;
        }
    }
}
