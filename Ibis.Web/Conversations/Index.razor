@page "/conversations/new"
@page "/conversations/{Id}"
@layout DashLayout
@attribute [Authorize]

<section class="conversation">
    <div class="messages">
        @foreach (var message in Messages)
        {
            <MessageCard Message=message Language=@Language />
        }
    </div>
    <h3>Language: @Language</h3>
    <div class="input">
        <input @bind="Text" @bind:event="oninput" @onkeydown=MaybeSendText />
        <div class="options">
            <button @onclick="Upload">
                <i class="material-icons">cloud_upload</i>
            </button>
            <button @onclick="DownloadText">
                <i class="material-icons">file_download</i>
            </button>
            <button @onclick="DownloadAudio">
                <i class="material-icons">audio_file</i>
            </button>
            <button @onclick="Call">
                <i class="material-icons">call</i>
            </button>
            <button @onclick="Sms">
                <i class="material-icons">sms</i>
            </button>
            <button @onclick="Speak">
                <i class="material-icons">keyboard_voice</i>
            </button>
             <button @onclick="DownloadSRT">
                <i class="material-icons">file_download</i>
            </button>
        </div>
        <div class="buttons">
            <button @onclick="SendText" class="active">
                <i class="material-icons">send</i>
            </button>
        </div>
    </div>

</section>

@using Microsoft.AspNetCore.SignalR.Client
@using System.Text
@inject IJSRuntime JS

@code {
    [Parameter] public string? Id { get; set; }
    [Parameter]
    [SupplyParameterFromQuery(Name = "language")] public string? Language { get; set; }
    string? Text;
    Conversation? Conversation;
    List<Message> Messages = new();

    HubConnection Connection { get; set; }
    bool IsConnected => Connection?.State == HubConnectionState.Connected;

    protected override async Task OnInitializedAsync()
    {
        var user = await Api.UpdateUserAsync();

        if (string.IsNullOrWhiteSpace(Language))
            Language = string.IsNullOrWhiteSpace(user.Language) ? "en-US" : user.Language;

        if (string.IsNullOrWhiteSpace(Id))
        {
            Conversation = await Api.StartConversationAsync();
            Nav.NavigateTo($"/conversations/{Conversation.Id}", true);
        }
        else 
        {
            var conversation = await Api.GetConversationAsync(new GetConversationRequest { ConversationId = Id, Language = Language });
            Conversation = conversation.Conversation;
            Messages = conversation.Messages.ToList();
        }

        Connection = new HubConnectionBuilder()
            .WithUrl(Config["ApiUrl"] + "/conversations")
            .Build();

        Connection.On<Message>("NewMessage", message => {
            message.IsNew = true;
            AddMessage(message);
        });
        await Connection.StartAsync();
        await Connection.SendAsync("AddToConversation", Conversation.Id, user.Id, Language);
    }

    void AddMessage(Message message)
    {
        var existingId = Messages.FindIndex(x => x.Id == message.Id);
        if (existingId > -1)
            Messages[existingId] = message;
        else
            Messages.Add(message);

        StateHasChanged();
    }

    async Task Upload()
    {
        // link or direct upload
    }
    async Task Call()
    {

    }
    async Task Sms()
    {

    }
    async Task Speak()
    {

    }

    async Task MaybeSendText(KeyboardEventArgs args)
    {
        if (args.Code == "Enter")
            await SendText();
    }

    async Task SendText()
    {
        var newMessage = await Api.SendMessageAsync(new SendMessageRequest { ConversationId = Conversation.Id, Message = Text, Language = Language });
        AddMessage(newMessage);
        Text = null;
    }

    async Task DownloadText()
    {
        StringBuilder builder = new StringBuilder();
        foreach(var message in Messages)
        {
            builder.AppendLine(message.Timestamp.LocalDateTime.ToString("MM/dd/yyyy hh:mm tt") + ": " +  message.Text);
        }

        byte[] bytes = Encoding.ASCII.GetBytes(builder.ToString());
        Stream fileStream = new MemoryStream(bytes);

        var fileName = GetFileName(Conversation?.Name);
        Console.WriteLine("test1" + fileName);
        using var streamRef = new DotNetStreamReference(stream: fileStream);
        await JS.InvokeVoidAsync("downloadFileFromStream", fileName, streamRef);
    }

    async Task DownloadAudio()
    {
        List<string> mergeFiles = new List<string>();
        foreach(var message in Messages)
        {
            mergeFiles.Add(message.AudioId);
        }

        var filePath = await Api.MergeAudioAsync(new MergeAudioRequest {Files = mergeFiles, ConversationId = Conversation.Id, Language = "en-US" });
        Console.WriteLine(filePath);
        var fileName = GetFileName(Conversation?.Name);
        await JS.InvokeVoidAsync("triggerFileDownload", fileName + ".wav", filePath);
    }

    string GetFileName(string name)
    {
        var fileName = name;// != null ? name + ".txt" : "transcript.txt";
        foreach(char c in System.IO.Path.GetInvalidFileNameChars())
        {
            fileName = fileName.Replace(c, '_');
        }

        return fileName;
    }

    async Task DownloadSRT()
    {
        StringBuilder builder = new StringBuilder();

        var num = 1;
        foreach(var message in Messages)
        {
            
            //var frame = num;
            builder.AppendLine(num.ToString());
            num++;
            //hours:minutes:seconds,milliseconds –> hours:minutes:seconds,milliseconds
            builder.AppendLine(message.Timestamp.LocalDateTime.ToString("hh:mm:ss,ms") + " --> " + message.Timestamp.LocalDateTime.AddSeconds(10).ToString("hh:mm:ss,ms"));
            builder.AppendLine(message.Text);
            builder.Append(Environment.NewLine);
        }

        byte[] bytes = Encoding.ASCII.GetBytes(builder.ToString());
        Stream fileStream = new MemoryStream(bytes);

        var fileName = Conversation?.Name + ".srt" ?? "testcaptions.srt";
        foreach(char c in System.IO.Path.GetInvalidFileNameChars())
        {
            fileName = fileName.Replace(c, '_');
        }

        using var streamRef = new DotNetStreamReference(stream: fileStream);
        await JS.InvokeVoidAsync("downloadFileFromStream", fileName, streamRef);
    }
}
