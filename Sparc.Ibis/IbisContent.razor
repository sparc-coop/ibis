@using System.Web
@using Microsoft.JSInterop;
@implements IDisposable

<article lang="@_selectedLanguage" class="ibis-content">
    @* <aside class="ibis-widget">
        @if (LocalMessage.User != null && Me?.Id == LocalMessage.User.Id)
        {
            <ul class="actions">
                <li>
                    <button tabindex="0" @onclick=Edit @onkeydown="EditAction" @onclick:stopPropagation="true">
                        <i class="material-icons">edit</i>
                    </button>
                </li>
                <li>
                    <button tabindex="0" @onclick=Delete @onkeydown="DeleteAction" @onclick:stopPropagation="true">
                        <i class="material-icons">delete</i>
                    </button>
                </li>
            </ul>
        }
        <IbisLanguageSelector SelectedLanguage="@_selectedLanguage" OnLanguageSelected="ChangeMessageLanguage" />
        <IbisAudioPlayer Message="LocalMessage" AutoPlay="@AutoPlay" />
        <figure>
            <img src="https://ibis.chat/images/logo_icon.png" alt="Ibis logo" />
            <figcaption>Ibis</figcaption>
        </figure>
    </aside> *@

    @if (ChildContent == null)
    {
        <div class="message-text @(LocalMessage.IsDeprecated.Value ? "deprecatedcontent" : "")" dir="@_languageDirection">
            @((MarkupString)LocalMessage.Html)
        </div>
    }
    else
    {
        <section id="@_id" class="ibis-translate" dir="@_languageDirection">
            @ChildContent
        </section>
    }
</article>


@inject PersistentComponentState PersistedState

@code {
    [Parameter] public Message? Message { get; set; }
    [Parameter] public EventCallback<Message> OnEdit { get; set; }
    [Parameter] public EventCallback<Message> OnDelete { get; set; }
    [Parameter] public RenderFragment? ChildContent { get; set; }
    [Parameter] public bool AutoPlay { get; set; }
    [CascadingParameter] public UserAvatar? Me { get; set; }

    public string Title = "";

    Message LocalMessage = new();

    string? _selectedLanguage;
    string _languageDirection => Message?.LanguageIsRTL == true ? "rtl" : "ltr";
    string _id = $"ibis-{Guid.NewGuid()}";

    PersistingComponentStateSubscription PersistedStateSubscription;

    // protected override async Task OnInitializedAsync()
    // {
    //     if (ChannelId != null && Tag != null)
    //     {
    //         LocalMessage = await Api.GetMessageAsync(new GetMessageRequest { RoomSlug = ChannelId, Tag = Tag });
    //     }
    //     else if (Message != null)
    //     {
    //         LocalMessage = Message;
    //     }
    // }

    protected override async Task OnInitializedAsync()
    {
        Console.WriteLine($"CurrentUrl -> {Nav.Uri}");

        if (Message.RoomId != null && Message.Id != null)
        {
            LocalMessage = await Api.GetMessageAsync(new GetMessageRequest { RoomSlug = Message.RoomId, Tag = Message.Id });
        }
        else if (Message != null)
        {
            LocalMessage = Message;
        }        
    }

    protected override async Task OnParametersSetAsync()
    {
        if (Message != null && Message.Id == LocalMessage.Id && Message.LastModified != LocalMessage.LastModified)
        {
            LocalMessage = Message;
        }

        if (_selectedLanguage != LocalMessage?.Language)
        {
            _selectedLanguage = LocalMessage?.Language;
            await ChangeMessageLanguage(_selectedLanguage);
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (!firstRender)
        {
            return;
        }

        PersistedStateSubscription = PersistedState.RegisterOnPersisting(PersistData);
        await InitFromClientAsync(_selectedLanguage);
    }

    async Task InitFromClientAsync(string? language, bool forceLoad = false)
    {
        if (ChildContent == null)
            return;

        if (PersistedState.TryTakeFromJson("id", out string? id))
            _id = id!;

        if (!forceLoad && PersistedState.TryTakeFromJson<List<Message>>(Nav.Uri, out var restoredIbisContent))
        {
            _selectedLanguage = await Ibis.InitAsync(Nav.Uri, language, restoredIbisContent);
        }
        else
        {
            _selectedLanguage = await Ibis.InitAsync(Nav.Uri, language);
        }

        await Ibis.InitClientAsync(this, _id);
        StateHasChanged();
    }

    async Task ChangeMessageLanguage(string languageId)
    {
        if (ChildContent != null && languageId != _selectedLanguage)
        {
            await InitFromClientAsync(languageId, true);
        }
        else if (languageId != LocalMessage.Language)
        {
            LocalMessage = await Api.GetMessageAsync(new GetMessageRequest 
            { 
                RoomSlug = LocalMessage.RoomId, 
                Tag = LocalMessage.SourceMessageId ?? LocalMessage.Id, 
                Language = languageId 
            });
            _selectedLanguage = LocalMessage?.Language;
        }
    }

    [JSInvokable]
    public async Task<List<string>> TranslateAsync(List<string> text)
    {
        return await Ibis.TranslateAsync(text, Nav.Uri);
    }

    Task PersistData()
    {
        PersistedState.PersistAsJson(Nav.Uri, Ibis.Content);
        PersistedState.PersistAsJson("id", _id);

        return Task.CompletedTask;
    }

    public void Dispose()
    {
        PersistedStateSubscription.Dispose();
    }

    async Task Edit()
    {
        if (OnEdit.HasDelegate)
            await OnEdit.InvokeAsync(LocalMessage);
    }
    
    async Task Delete()
    {
        var truncatedMessage = new String(LocalMessage.Text.Take(20).ToArray()) + (LocalMessage.Text.Length > 20 ? "..." : "");

        if (!await JS.InvokeAsync<bool>("confirm", $"Are you sure you want to delete the message '{truncatedMessage}'?"))
            return;

        if (OnDelete.HasDelegate)
            await OnDelete.InvokeAsync(Message);
    }

    async Task EditAction(KeyboardEventArgs e)
    {
        if (e.Key == "Enter")
        {
            await Edit();
        }
    }


    async Task DeleteAction(KeyboardEventArgs e)
    {
        if (e.Key == "Enter")
        {
            await Delete();
        }
    }
}
