<section class="confirmOrEditText modal">
    <div class="input">
        <i class="material-icons">edit</i>
        @foreach(var message in Messages.ToList())
        {
            <textarea @bind="message.ModifiedText" @bind:event="oninput" @onkeydown=MaybeSendText />     
        }
        <div class="buttons">
            <button @onclick="SendText" aria-label="Send" class="active">
                <i class="material-icons">send</i>
            </button>
        </div>
        <div class="buttons-cancel">
            <button @onclick="Cancel" aria-label="Cancel">Cancel</button>
        </div>
    </div>
</section>

@code {
    [Parameter] public string? RoomId { get; set; }
    [Parameter] public string? Language { get; set; }
    [Parameter] public List<Message>? Messages { get; set; }
    //[Parameter] public string? Text { get; set; }
    //[Parameter] public string? ModifiedText { get; set; }
    [Parameter] public byte[]? Bytes { get; set;  }

    [CascadingParameter] BlazoredModalInstance ModalInstance { get; set; } = default!;

    //void AddMessage(Message message)
    //{
    //    var existingId = Messages.FindIndex(x => x.Id == message.Id);
    //    if (existingId > -1)
    //        Messages[existingId] = message;
    //    else
    //        Messages.Add(message);

    //    StateHasChanged();
    //}

    async Task MaybeSendText(KeyboardEventArgs args)
    {
        if (args.Code == "Enter")
            await SendText();
    }

    async Task SendText()
    {
        
        foreach(var message in Messages.ToList())
        {
            Message newMessage; //= await Api.SendMessageAsync(new SendMessageRequest { RoomId = RoomId, Message = message.Text, Language = Language, MessageId = message.Id, ModifiedMessage = null, Bytes = Bytes });
            if (message.ModifiedText == message.Text)
            {
                newMessage = await Api.SendMessageAsync(new SendMessageRequest { RoomId = RoomId, Message = message.Text, Language = Language, MessageId = message.Id, ModifiedMessage = null, Bytes = null });
            } else {
                newMessage = await Api.SendMessageAsync(new SendMessageRequest { RoomId = RoomId, Message = message.Text, Language = Language, MessageId = message.Id, ModifiedMessage = message.ModifiedText, Bytes = null });
            }
            //AddMessage(message);
            Messages.Add(newMessage);
        }
        //Message newMessage;
        //if (ModifiedText == Text)
        //{
        //    newMessage = await Api.SendMessageAsync(new SendMessageRequest { RoomId = RoomId, Message = Text, Language = Language, MessageId = MessageId, ModifiedMessage = null, Bytes = Bytes });
        //} else {
        //    newMessage = await Api.SendMessageAsync(new SendMessageRequest { RoomId = RoomId, Message = Text, Language = Language, MessageId = MessageId, ModifiedMessage = ModifiedText, Bytes = Bytes });
        //}
        //AddMessage(newMessage);
        await ModalInstance.CloseAsync(ModalResult.Ok(true));
    }

    async Task Cancel()
    {
        foreach(var message in Messages.ToList())
        {
            await Api.DeleteMessageAsync(new DeleteMessageRequest { RoomId = RoomId, MessageId = message.Id });    
        }
        //await Api.DeleteMessageAsync(new DeleteMessageRequest { RoomId = RoomId, MessageId = MessageId });
        await ModalInstance.CancelAsync();
    }
}
