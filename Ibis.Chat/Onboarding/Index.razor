@inherits SparcModal

<div class="onboarding">
    @if (User != null)
    {
        <header>
            <img class="header-logo" src="images/logo_icon.png" />
        </header>

        <CascadingValue Value="User">
            <ul @onkeydown="Close" class="tabs" @ref="userOverlay">
                @foreach (var tab in Tabs)
                {
                    <li tabindex="0" class="@(Tab == tab ? "selected" : "")" @onclick="(() => SetTab(tab))">@tab</li>
                }
            </ul>

            @switch (Tab)
            {
                case "Profile":
                    <AccountDetails />
                    break;
                case "Language":
                    <LanguageSelector OnSelected="GoToVoice" />
                    break;
                case "Voice":
                    <VoiceSelector />
                    break;
                case "Avatar":
                    <AvatarEditor User=User SpillBackground="true"/>
                    break;
            }   
            <div class="close-avatareditor">
                <button @onclick="Done">Done</button>
            </div>
        </CascadingValue>
    }
</div>

@inject IJSRuntime jsRuntime
@code {
    [Parameter] public string? Tab { get; set; }
    List<string> Tabs = new() { "Profile", "Language", "Voice", "Avatar" };
    public UserAvatar? User { get; set; }
    [Parameter] public EventCallback OnDone { get; set; }
    ElementReference? userOverlay;

    void SetTab(string tab) => Tab = tab;
    void GoToVoice() => Tab = "Voice";

    protected override async Task OnInitializedAsync()
    {
        User = await Api.GetUserAsync();

        if (User == null)
            return;

        if (Tab == null && User.Voice == null)
            Tab = "Language";
        else if (Tab == null)
            Tab = "Profile";
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender && userOverlay.HasValue)
            await userOverlay.Value.FocusAsync();
    }

    async Task Done()
    {
        var user = await Api.GetUserAsync();
        await Ok(user);
    }

    public async Task Close(KeyboardEventArgs e)
    {
        if (e.Key == "Escape")
        {
            await Done();
        }
    }
}
