@implements IDisposable

@if (Message != null)
{
    <div class="ibis-audio  @(AudioOffset != null ? "playing" : "")" @onclick="Play" @onclick:stopPropagation="true">
        <PlayIcon />

        @if (MessagePlaying != null)
        {
            <div class="message-subtitles">
                @foreach (var word in MessagePlaying!.Audio!.Subtitles)
                {
                    <span class="@(WordIsActive(word) ? "active" : "")">
                        @word.Text
                    </span>
                }
            </div>
        }
    </div>
}

@code {
    [Parameter] public Message? Message { get; set; }
    [Parameter] public IList<Message>? Messages { get; set; }
    [Parameter] public bool? AutoPlay { get; set; }
    Message? MessagePlaying;

    long? AudioOffset;
    System.Timers.Timer? AudioTimer;

    protected override void OnParametersSet()
    {
        if (Message != null)
            Messages = new List<Message> { Message };
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender && AutoPlay == true)
            await Play();
    }

    async Task Play()
    {
        if (Messages?.Any() != true)
            return;

        Console.WriteLine("AudioPlayer Play()");

        foreach (var message in Messages)
        {
            if (message.Audio?.Url == null)
                message.Audio = await Api.GetMessageAudioAsync(new GetMessageAudioRequest { MessageId = message.Id });
            
            await Ibis.PlayAsync(message);
            StartSubtitles(message);
        }
    }

    void StartSubtitles(Message message)
    {
        if (message?.Audio?.Url == null)
            return;
        
        MessagePlaying = message;
        StateHasChanged();

        AudioOffset = 0;
        AudioTimer = new(100);
        AudioTimer.Elapsed += (source, e) =>
        {
            if (AudioOffset > message.Audio.Duration)
            {
                AudioTimer.Stop();
                AudioOffset = null;
                MessagePlaying = null;
            }
            else
            {
                AudioOffset += 100;
            }
            InvokeAsync(StateHasChanged);
        };
        AudioTimer.Start();
    }

    bool WordIsActive(Word word) => AudioOffset != null && word.Offset < AudioOffset && AudioOffset < (word.Offset + word.Duration);

    public void Dispose()
    {
        AudioTimer?.Dispose();
    }
}