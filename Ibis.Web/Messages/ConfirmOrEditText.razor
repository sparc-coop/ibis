<section class="confirm-text modal">
    <h5>Edit Messages</h5>
    <div>
        @if(Messages.Any(x => x.SourceType == SourceTypes._4))
        {
            <audio src="/sounds/beep_down.wav" autoplay />  
        }
        @foreach(var message in Messages.ToList())
        {
            <i class="material-icons">edit</i>
            <textarea @bind="message.ModifiedText" @bind:event="oninput" @onkeydown=MaybeSendText />     
        }
        <div class="buttons">
            <button @onclick="SendText" aria-label="Send" class="primary">
                @(Messages.Count > 1 ? "Save Messages" : "Save Message")
                <i class="material-icons">send</i>
            </button>
        </div>
        <button class="close" @onclick="Cancel">
            <img src="/icons/Close.svg"/>
        </button>
    </div>
</section>

@code {
    [Parameter] public string? RoomId { get; set; }
    [Parameter] public string? Language { get; set; }
    [Parameter] public List<Message>? Messages { get; set; }
    [Parameter] public byte[]? Bytes { get; set;  }

    [CascadingParameter] BlazoredModalInstance ModalInstance { get; set; } = default!;

    async Task MaybeSendText(KeyboardEventArgs args)
    {
        if (args.Code == "Enter")
            await SendText();
    }

    async Task SendText()
    {
        
        foreach(var message in Messages.ToList())
        {
            Message newMessage;
            if (message.ModifiedText == message.Text)
            {
                newMessage = await Api.SendMessageAsync(new SendMessageRequest { RoomId = RoomId, Message = message.Text, Language = Language, MessageId = message.Id, ModifiedMessage = null, Bytes = Bytes });
            } else {
                newMessage = await Api.SendMessageAsync(new SendMessageRequest { RoomId = RoomId, Message = message.Text, Language = Language, MessageId = message.Id, ModifiedMessage = message.ModifiedText, Bytes = Bytes });
            }

            Messages.Add(newMessage);
        }

        await ModalInstance.CloseAsync(ModalResult.Ok(true));
        StateHasChanged();
    }

    async Task Cancel()
    {
        foreach(var message in Messages.ToList())
        {
            await Api.DeleteMessageAsync(new DeleteMessageRequest { RoomId = RoomId, MessageId = message.Id });    
        }
        await ModalInstance.CancelAsync();
    }
}
