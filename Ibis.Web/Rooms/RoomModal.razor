<div class="invite-block modal">
    <h4>Create Room</h4>
    <div class="room-icons">
        <p class="medium">Room Icon</p>
        <div class="room-icon-wrapper">
            <a class="room-icon">
                <img src="/icons/User-Voice__Outline.svg" />
            </a>
            <a class="room-icon">
                <img src="/icons/Circle.svg" />
            </a>
            <a class="room-icon">
                <img src="/icons/Speech.svg" />
            </a>
            <a class="room-icon">
                <img src="/icons/Send-Arrow.svg" />
            </a>
        </div>
    </div>
    <div class="room-name-wrapper">
        <p class="medium">Room Name</p>
        <input type="email" placeholder="Enter Room Name" @bind="Name" />
    </div>
    <p class="medium">Invite Room Members</p>
    <div class="invite-search">
        <input type="email" placeholder="Email" @bind="InviteEmail" />
        <button class="secondary" @onclick="InviteUser">Add Member</button>
    </div>
                
    <div class="invite-users">
        <p class="medium">Participants</p>
        <div class="user-wrapper">
            <div class="user-left">
                <img src="/icons/Badge.svg"/>
                <p class="large">Kieran Parker</p>
            </div>
            <div class="user-right">
                <p class="small host">Host</p>
            </div>
        </div>
        @foreach (var inv in emails)
        {
                    <div class="user-wrapper">
            <div class="user-left">
                <img src="/icons/Badge.svg"/>
                <p class="large">@inv</p>
            </div>
            <div class="user-right">
                <p class="small invited">Inviting</p>
            </div>
        </div>
        }

        @if (Group.Users != null)
        {
          foreach (var user in Group.Users)
        {
           <div class="user-wrapper">
            <div class="user-left">
                <img src="/icons/Badge.svg"/>
                <p class="large">@user.Name</p>
            </div>
            <div class="user-right">
                <p class="small success">Success</p>
            </div>
        </div>
        }
        }

                   <div class="user-wrapper">
            <div class="user-left">
                <img src="/icons/Badge.svg"/>
                <p class="large">Kieran Parker</p>
            </div>
            <div class="user-right">
                <p class="small success">Success</p>
            </div>
        </div>
    </div>

    <div class="share-link">
        <p class="medium">
            Copy & Share Link
        </p>
        <div class="share-link-wrapper" @onclick="CopyLink">
            <div>conversation.ibis.com/ratio-view-wing</div>
            <span>@CopyConfirm</span>
            <img src="/icons/copy.svg" />
        </div>
    </div>

    <button class="create-room" @onclick="CreateRoom">Create Room</button>

    <button class="close" @onclick="Close">
        <img src="/icons/Close.svg"/>
    </button>
</div>

@code {
    [CascadingParameter] 
    BlazoredModalInstance ModalInstance { get; set; } = default!;
    void Close() => ModalInstance.CancelAsync();
    string Name;
    string InviteEmail;
    RoomUsersResponse Group = new RoomUsersResponse();
    string CopyConfirm = "";
    List<string> emails = new List<string>();
    List<User> invited = new List<User>();

    async Task CreateRoom()
    {

        var userList = new List<RoomUser>();
        //foreach(var item in room.ActiveUsers)
        //{
        //    User user = await Users.FindAsync(item.UserId);

        //}

        GetRoomResponse response = await Api.CreateRoomAsync(new NewRoomRequest { RoomName = Name }); //Participants = Group

        foreach (var email in emails)
        {
            var invitee = await Api.FindUserByEmailAsync(new FindUserRequest { Email = email });
            var newRoomUser = await Api.InviteUserAsync(new InviteUserRequest { Email = email, RoomId = response.RoomId, UserId = invitee.UserId });

            //RoomUser roomUser = new RoomUser();
            //roomUser.Email = invitee.Email;
            //roomUser.Name = invitee.DisplayName;
            //roomUser.Initials = invitee.Initials;
            //userList.Add(newRoomUser);

            
            //Group.Users.Add(invitee);
        }

        //GetRoomResponse response = await Api.CreateRoomAsync(new NewRoomRequest { RoomName = Name, Participants = userList }); 
        

        Nav.NavigateTo($"/rooms/{response.RoomId}", true);
    }

    async void InviteUser() {
        emails.Add(InviteEmail);
        //foreach(var email in emails)
        //{
        //    var invitee = await Api.FindUserByEmailAsync(new FindUserRequest { Email = email });
        //    invited.Add(invitee);
        //}

    }

    async Task CopyLink()
    {
        //
        CopyConfirm = "Copied!";
        await Task.Delay(3000);
        CopyConfirm = "";
    }
}