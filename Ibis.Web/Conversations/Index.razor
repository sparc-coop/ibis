@page "/conversations/new"
@page "/conversations/{Id}"

<section class="conversation">
    @foreach (var message in Messages)
    {
        <MessageCard Message=message Language=@Language />
    }
    <div>Language: @Language</div>
    <div class="input">
        <input @bind="Text" @bind:event="oninput" @onkeydown=MaybeSendText />
        <div class="buttons">
            <button @onclick="Upload">
                <i class="material-icons">cloud_upload</i>
            </button>
            <button @onclick="Call">
                <i class="material-icons">call</i>
            </button>
            <button @onclick="Sms">
                <i class="material-icons">sms</i>
            </button>
            <button @onclick="Speak">
                <i class="material-icons">keyboard_voice</i>
            </button>
            <button @onclick="SendText" class="active">
                <i class="material-icons">send</i>
            </button>
        </div>
    </div>
</section>

@using Microsoft.AspNetCore.SignalR.Client;
@using Ibis.Features;

@code {
    [Parameter] public string? Id { get; set; }
    [Parameter]
    [SupplyParameterFromQuery(Name = "language")] public string? Language { get; set; }
    string? Text;
    Conversation? Conversation;
    List<Message> Messages = new();

    HubConnection Connection { get; set; }
    bool IsConnected => Connection?.State == HubConnectionState.Connected;

    protected override async Task OnInitializedAsync()
    {
        var user = await Api.UpdateUserAsync();

        if (string.IsNullOrWhiteSpace(Language))
            Language = string.IsNullOrWhiteSpace(user.Language) ? "en-US" : user.Language;

        if (string.IsNullOrWhiteSpace(Id))
        {
            Conversation = await Api.StartConversationAsync();
            Nav.NavigateTo($"/conversations/{Conversation.Id}", true);
        }
        else 
        {
            var conversation = await Api.GetConversationAsync(new GetConversationRequest { ConversationId = Id, Language = Language });
            Conversation = conversation.Conversation;
            Messages = conversation.Messages.ToList();
        }

        Connection = new HubConnectionBuilder()
            .WithUrl(Config["ApiUrl"] + "/conversations")
            .Build();

        Connection.On<Message>("NewMessage", message => {
            message.IsNew = true;
            AddMessage(message);
        });
        await Connection.StartAsync();
        await Connection.SendAsync("AddToConversation", Conversation.Id, user.Id, Language);
    }

    void AddMessage(Message message)
    {
        var existingId = Messages.FindIndex(x => x.Id == message.Id);
        if (existingId > -1)
            Messages[existingId] = message;
        else
            Messages.Add(message);

        StateHasChanged();
    }

    async Task Upload()
    {
        // link or direct upload
    }
    async Task Call()
    {

    }
    async Task Sms()
    {

    }

    async Task Speak()
    {
        await Api.RecordSpeechFromMicAsync(new RecordSpeechFromMicRequeset { Name = "test name" });
    }

    async Task MaybeSendText(KeyboardEventArgs args)
    {
        if (args.Code == "Enter")
            await SendText();
    }

    async Task SendText()
    {
        //var newMessage = await Api.SendMessageAsync(new SendMessageRequest { ConversationId = Conversation.Id, Message = Text, Language = Language });
        //AddMessage(newMessage);
        //Text = null;
    }
}
