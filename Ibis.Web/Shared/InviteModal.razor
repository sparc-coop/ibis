<div class="invite-block modal">
    <h4>Invite People</h4>
    <button class="close" @onclick="Close">
        <img src="/icons/Close.svg"/>
    </button>
    <div class="invite-search">
        <input placeholder="Email" @bind="InviteEmail"/>
        <button @onclick="SendInvite" class="primary">Send Invite</button>
    </div>
    <div class="invite-users">
            <h5>Participants</h5>
            @foreach(var user in Room.ActiveUsers)
            {
                <Avatar User="user" />
            }
            @foreach(var user in Room.PendingUsers)
            {
                <Avatar User="user" />
            }
    </div>
    <div class="share-link">
        <p class="medium">Copy & Share Link</p>
        <div class="share-link-wrapper" @onclick="CopyLink">
            <input type="hidden" id="@Room.RoomId" value="@("https://www.ibis.com/" + Room.RoomId)" />
            <div>room.ibis.com/@Room.RoomId</div>
            <span>@CopyConfirm</span>
            <img src="/icons/copy.svg" />
        </div>
    </div>
</div>


@code {
    [Parameter] public GetRoomResponse Room { get; set; } = null!;
    [CascadingParameter] BlazoredModalInstance ModalInstance { get; set; } = default!;

    bool Sent = false;
    string? InviteEmail;
    List<string> NewEmails = new List<string>();
    string CopyConfirm = "";

    async Task SendInvite()
    {
        if (!string.IsNullOrWhiteSpace(InviteEmail))
        {
            NewEmails.Add(InviteEmail);
            InviteEmail = "";
            Sent = await Api.InviteUserAsync(new InviteUserRequest { RoomId = Room.RoomId, Email = InviteEmail });
        }
    }

    async Task CopyLink()
    {
        //link to copy
        await JS.InvokeVoidAsync("copyToClipboard", Room.RoomId, "invite");
        CopyConfirm = "Copied!";
        StateHasChanged();
        await Task.Delay(2000);
        CopyConfirm = "";
    }

    void Close() => ModalInstance.CancelAsync();
}