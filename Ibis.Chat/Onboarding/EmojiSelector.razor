<div class="emoji-selector">
    @if (Emojis != null)
    {
        @*<h4>Choose your skin tone</h4>
        <ul class="skintones">
            @foreach (var skintone in Emojis.Skintones)
            {
                <li @onclick="(() => SetSkintone(skintone))" class="@(User.SkinTone == skintone ? "selected" : "")">
                    @skintone
                </li>
            }
        </ul>
    *@
        <h3 @ref="EmojiList">Emoji</h3>
        <div class="emoji-container">
            <ul onkeypress="Leave" class="emojis ibis-ignore">
                @{ int tabIndex = 0; }
                @foreach (var emoji in Emojis.Emojis)
                {
                    <li tabindex="@tabIndex++" @onclick="(() => SetEmoji(emoji))" class="@(User.Emoji == emoji ? "selected" : "")">
                        @emoji
                    </li>
                }
            </ul>
        </div>
    }
</div>

@code {
    [CascadingParameter] public UserAvatar User { get; set; } = null!;
    GetEmojisResponse? Emojis { get; set; }
    private ElementReference EmojiList;

    protected override async Task OnInitializedAsync()
    {
        Emojis = await Api.GetEmojisAsync();
    }

    async Task SetSkintone(string skintone)
    {
        User.SkinTone = skintone;
        await Api.UpdateUserAsync(User);
    }

    async Task SetEmoji(string emoji)
    {
        User.Emoji = emoji;
        await Api.UpdateUserAsync(User);
    }

    async Task Leave(KeyboardEventArgs e)
    {
        if (e.Key == "Escape")
        {
            await EmojiList.FocusAsync();
        }
    }
}