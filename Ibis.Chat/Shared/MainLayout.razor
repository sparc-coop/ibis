@inherits LayoutComponentBase
@using Sparc.Ibis;

<RealtimeHub Url="@HubUrl">
    <CascadingValue Value="User">
        <div class="main-layout @(IsRoom ? "mini" : "" )">
            <header>
                <h1>
                <a href="/rooms">
                    <figure class="logo">
                        @if (IsRoom)
                        {
                            <img src="/images/logo_icon.png" alt="Ibis" />
                        }
                        else
                        {
                            <img src="/images/logo_2x.png" alt="Ibis" />
                        }
                        <figcaption>Ibis</figcaption>
                    </figure>
                </a>
                </h1>
                <nav>
                    <AuthorizeView>
                        <Authorized>
                            @if (User != null)
                            {
                                <ul>
                                    <li>
                                        <button @onclick="GoToRooms">
                                            <img src="../icons/dashboard.svg" alt="Your Rooms" />
                                        </button>
                                    </li>
                                    <li>
                                        <UserBalance User="User" />
                                    </li>
                                    <li tabindex="0" class="avatar-container @(ShowMenu ? "open" : "")" @onclick="OpenMenu" @onfocus="OpenMenu">
                                        <Avatar User="User" />
                                        <img src="../icons/down-arrow.png" class="arrow" alt="Account Settings" />
                                        <ul>
                                            <li>
                                                <button class="navmenu-button" @onclick="@EditAvatar" @onclick:stopPropagation="true">Edit Your Avatar</button>
                                            </li>
                                            <li>
                                                <a href="account" class="navmenu-button" @onclick="@(e => ShowMenu = !ShowMenu)" @onclick:stopPropagation="true">Account Settings</a>
                                            </li>
                                            <li>
                                                <button class="logout navmenu-button" @onclick="Logout" @onclick:stopPropagation="true">
                                                    Log Out
                                                </button>
                                            </li>
                                        </ul>
                                    </li>
                                </ul>
                            }
                        </Authorized>
                    </AuthorizeView>
                </nav>
            </header>

            <main>
                @Body
            </main>
        </div>

        @if (ShowOnboarding)
        {
            <Ibis.Chat.Onboarding.Index OnDone="CloseOnboarding" />
        }
    </CascadingValue>
</RealtimeHub>

@inject AuthenticationStateProvider AuthenticationStateProvider

@code {
    UserAvatar? User;
    bool ShowMenu;
    bool IsRoom;
    bool ShowOnboarding;
    string HubUrl => Config["Blossom:Authority"] + "/hub";

    protected override async Task OnParametersSetAsync()
    {
        IsRoom = Nav.Uri.Contains("rooms/");

        if (User != null)
            return;

        await UpdateUser(AuthenticationStateProvider.GetAuthenticationStateAsync());

        AuthenticationStateProvider.AuthenticationStateChanged += async (state) => await UpdateUser(state);
    }

    void OpenMenu() => ShowMenu = !ShowMenu;

    void CloseOnboarding() => ShowOnboarding = false;

    void EditAvatar()
    {
        ShowMenu = false;
        ShowOnboarding = true;
    }

    bool isUserBeingGot;
    async Task UpdateUser(Task<AuthenticationState> state)
    {
        var user = (await state).User;

        if (User == null && !isUserBeingGot && user.Identity?.IsAuthenticated == true)
        {
            isUserBeingGot = true;
            User = await Api.GetUserAsync();
            if (User != null && User.Voice == null)
                ShowOnboarding = true;
            StateHasChanged();
            isUserBeingGot = false;
        }
    }

    void GoToRooms() => Nav.NavigateTo("/rooms");

    private void Logout()
    {
        Nav.NavigateToLogout("authentication/logout");
    }

    void KeyboardMenu(KeyboardEventArgs e)
    {
        if (e.Key == "Enter")
        {
            OpenMenu();
        }
    }
}