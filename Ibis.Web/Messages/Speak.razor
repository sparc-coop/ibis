@inherits RealtimeComponent

<section class="speak">
    <div class="input">
        @if (SessionId != null)
        {
            <h3>Recording...</h3>
            <audio src="/sounds/beep_up.wav" autoplay />
        }
        <p>@Text</p>
    </div>
</section>

@using Blazored.Modal;
@inject IModalService Modal;

@code {
    [Parameter] public string? RoomId { get; set; }
    [Parameter] public string? Language { get; set; }
    string? Text;
    string? SessionId;
    Message? Message;
    List<Message> Messages = new();

    [CascadingParameter] BlazoredModalInstance ModalInstance { get; set; } = default!;

    protected override async Task OnInitializedAsync()
    {
        var SessionId = await Api.HearMessageAsync();
        On<SpeechRecognizing>(x =>
        {
            if (x.SessionId == SessionId)
                Text = x.Text;
        });

        On<SpeechRecognized>(x =>
        {
            if (x.SessionId == SessionId)
            {
                Text = x.Text;
            }
        });

        await ModalInstance.CloseAsync(ModalResult.Ok(true));
    }

    void ShowConfirmOrEditTextModal(string roomId, string language, Message message, string text, byte[]? bytes)
    {
        List<Message> MessageList = new List<Message>();
        MessageList.Add(message);
        var parameters = new ModalParameters();
        parameters.Add(nameof(ConfirmOrEditText.RoomId), roomId);
        parameters.Add(nameof(ConfirmOrEditText.Language), language);
        parameters.Add(nameof(ConfirmOrEditText.MessageList), MessageList);
        parameters.Add(nameof(ConfirmOrEditText.Bytes), bytes);

        Modal.Show<ConfirmOrEditText>("Review Before Sending", parameters);
    }
}
