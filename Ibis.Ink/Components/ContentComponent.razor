<div class="page-content--component">
    <div class="component-title">@Title</div>
    <div class="component-text">
        <TextEditor MarkdownValue="@Content_Text" OnContentChanged="@(e => HandleContentChanged(e))" />
        @* <div class="page-editor--MDE">            
            <MarkdownEditorComponent @bind-Value="@MarkdownValue" OnContentChanged="HandleContentChanged" />
        </div> *@
    </div>
@*     @if (Type == "text")
    {
        <div class="component-title">@Title</div>
        <div class="component-text">
            <TextEditor MarkdownValue="@Content_Text" />
        </div>
    } else if (Type == "image")
    {
        @if (Content_ImageWidth != null && Content_ImageHeight != null)
        {
            string res = $"width: {Content_ImageWidth}; height: {Content_ImageHeight}";
            string resString = $"{Content_ImageWidth.Replace("px", "")}x{Content_ImageHeight.Replace("px", "")}";
            <div class="component-title">@Title | @Content_ImagePath @resString</div>
            <div class="component-image">
                <img class="component-image--image" src="images/@Content_ImagePath" style=@res />
                <div class="component-image--caption">
                    <TextEditor MarkdownValue="@Content_ImageCaption" />
                </div>
            </div>
        }
    }
 *@</div>

@code {
    [Parameter] public string? Id { get; set; }
    [Parameter] public string? RoomId { get; set; }
    [Parameter] public string? Type { get; set; }
    [Parameter] public string? Title { get; set; }
    [Parameter] public string? Content_Text { get; set; }
    [Parameter] public string? Content_ImagePath { get; set; }
    [Parameter] public string? Content_ImageWidth { get; set; }
    [Parameter] public string? Content_ImageHeight { get; set; }
    [Parameter] public string? Content_ImageCaption { get; set; }
    [Parameter] public string? HTML { get; set; }
    //[Parameter] public string? MarkdownValue { get; set; }
    [Parameter] public EventCallback<MarkdownEditor> OnContentChanged { get; set; }

    List<Message>? Messages;
    Message? Message;

    // protected override void OnInitialized()
    // {
    //     Console.WriteLine(Content_Text);
    // }

    protected override async Task OnInitializedAsync()
    {
        var response = await Api.GetAllContentAsync(new GetAllContentRequest { RoomSlug = RoomId });
        Messages = response.Content.ToList();
        Message = Messages.First(x => x.Id == Id);

        Console.WriteLine(Content_Text);
    }

    void HandleContentChanged(MarkdownEditor markdownEditor)
    {
        if (Message != null)
        {
            Message.Text = markdownEditor.Value.ToString();
            Content_Text = Message.Text;
            UpdateMessage(Message);
            // await OnContentChanged.InvokeAsync(markdownEditor);
        }
    }

    void UpdateMessage(Message message)
    {
        if (Messages != null)
        {
            var existingId = Messages.FindIndex(x =>
               x.Id == message.Id
            || x.Id == message.SourceMessageId
            || message.Id == x.SourceMessageId
            || (message.SourceMessageId != null && x.SourceMessageId == message.SourceMessageId));
            if (existingId > -1)
            {
                Messages[existingId] = message;
            }
            else
            {
                Messages.Add(message);
            }
        }
    }
}