@page "/rooms/{Id}"
@layout DashLayout

<CascadingValue Value="Connection">
    <section class="room">
        <header>
            @if (RoomInfo != null)
            {
                <h2>
                    @RoomInfo.Name
                    <input type="hidden" id="@RoomInfo.RoomId" value="@("https://www.ibis.com/" + RoomInfo.RoomId)" />
                    <img class="share" src="/icons/link.svg" @onclick:stopPropagation="true" @onclick="@(e => ShareLink(RoomInfo.RoomId))" title="Share Link" />
                    <span>@CopyConfirm</span>
                </h2>
                <InviteUser RoomId="@RoomInfo.RoomId" />
                <button @onclick="@(() => DownloadText("TXT"))" aria-label="Download Text" class="select-upload" title="Download text transcript">
                    <i class="material-icons">file_download</i>
                </button>
                <button @onclick="@(() => DownloadText("SRT"))" aria-label="Download Subtitles" class="select-upload" title="Download subtitles">
                    <i class="material-icons">file_download</i>
                </button>
                <button @onclick="DownloadAudio" aria-label="Download Audio" class="select-upload" title="Download audio transcript">
                    <i class="material-icons">audio_file</i>
                </button>
            }
        </header>
        <div class="content">
            <MessageList RoomId="Id" />
            <LanguageSelector />
        </div>
    </section>
</CascadingValue>

@using Microsoft.AspNetCore.SignalR.Client

@code {
    [Parameter] public string Id { get; set; } = null!;
    GetRoomResponse? RoomInfo;

    HubConnection? Connection { get; set; }
    bool IsConnected => Connection?.State == HubConnectionState.Connected;

    string CopyConfirm = "";

    protected override async Task OnInitializedAsync()
    {
        RoomInfo = await Api.GetRoomAsync(new GetRoomRequest { RoomId = Id });

        Connection = new HubConnectionBuilder()
            .WithUrl(Config["ApiUrl"] + "/rooms")
            .Build();

        await Connection.StartAsync();
        await Connection.SendAsync("AddToRoom", RoomInfo.RoomId);
    }

    async Task DownloadAudio()
    {
        var audio = await Api.GetRoomAudioAsync(new GetRoomAudioRequest { RoomId = Id });
        await JS.InvokeVoidAsync("triggerFileDownload", audio.Url);
    }

    string GetFileName(string name)
    {
        var fileName = name;
        foreach (char c in System.IO.Path.GetInvalidFileNameChars())
        {
            fileName = fileName.Replace(c, '_');
        }

        return fileName;
    }

    async Task DownloadText(string format)
    {
        var result = await Api.GetRoomTextAsync(new GetRoomTextRequest { RoomId = Id, Format = format });

        byte[] bytes = Encoding.ASCII.GetBytes(result.Text);
        Stream fileStream = new MemoryStream(bytes);

        var fileName = $"{RoomInfo!.Name}.{format.ToLower()}";
        foreach (char c in System.IO.Path.GetInvalidFileNameChars())
        {
            fileName = fileName.Replace(c, '_');
        }

        using var streamRef = new DotNetStreamReference(stream: fileStream);
        await JS.InvokeVoidAsync("downloadFileFromStream", fileName, streamRef);
    }

    async void UpdateName()
    {
        await Connection!.SendAsync("UpdateRoom", RoomInfo);
    }

    async Task ShareLink(string roomLink)
    {
        //copy room share link to clipboard
        await JS.InvokeVoidAsync("copyToClipboard", roomLink, "room");
        CopyConfirm = "Copied!";
        StateHasChanged();
        await Task.Delay(2000);
        CopyConfirm = "";
    }
}
