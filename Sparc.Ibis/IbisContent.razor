@using System.Web
@using Microsoft.JSInterop;
@implements IDisposable

<article class="ibis-content @(AudioOffset != null ? "playing" : "")">
    <aside class="ibis-widget">
        <IbisLanguageSelector SelectedLanguage="LocalMessage.Language" OnLanguageSelected="ChangeMessageLanguage" />

        @if (LocalMessage.Audio?.Url != null)
        {
            <PlayIcon @onclick="Play" />
        }
    </aside>
    @if (AudioOffset != null)
    {
        <div class="message-subtitles">
            @foreach (var word in LocalMessage.Audio!.Subtitles)
            {
                <span class="@(WordIsActive(word) ? "active" : "")">
                    @word.Text
                </span>
            }
        </div>
    }

    <div class="message-text">
        @foreach (var paragraph in LocalMessage.Html)
        {
            <p>@paragraph</p>
        }
    </div>
</article>

@inject IbisTranslator Ibis
@inject IbisClient Api
@code {
        [Parameter] public Message? Message { get; set; }
        [Parameter] public string? ChannelId { get; set; }
        [Parameter] public string? Tag { get; set; }
        Message LocalMessage = new();

        long? AudioOffset;
        System.Timers.Timer? AudioTimer;

    protected override async Task OnInitializedAsync()
    {
        if (Message != null)
            LocalMessage = Message;
        else if (ChannelId != null && Tag != null)
            LocalMessage = await Api.GetMessageAsync(new GetMessageRequest { RoomSlug = ChannelId, Tag = Tag });
    }

    bool WordIsActive(Word word) => AudioOffset != null && word.Offset < AudioOffset && AudioOffset < (word.Offset + word.Duration);

    async Task ChangeMessageLanguage(Language language)
    {
        if (Message != null && language.Id != Message.Language)
            LocalMessage = await Api.GetMessageAsync(new GetMessageRequest { RoomSlug = ChannelId, Tag = Tag, Language = language.Id });
    }

    async Task Play()
    {
        if (Message?.Audio?.Url != null)
        {
            AudioOffset = 0;
            AudioTimer = new(100);
            AudioTimer.Elapsed += (source, e) =>
            {
                if (AudioOffset > Message.Audio.Duration)
                {
                    AudioTimer.Stop();
                    AudioOffset = null;
                }
                else
                {
                    AudioOffset += 100;
                }
                InvokeAsync(StateHasChanged);
            };
            AudioTimer.Start();
            await Ibis.PlayAsync(Message);
        }
    }

    public void Dispose()
    {
        AudioTimer?.Dispose();
    }
}
