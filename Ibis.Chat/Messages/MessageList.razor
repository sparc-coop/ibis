@inherits RealtimeComponent

<div class="message-grid">
    @if (Messages != null)
    {
        <div class="message-list ibis-ignore" id="room-@Room.RoomId">
            @foreach (var message in Messages)
            {
                <MessageCard Message="message" PlayMessage="@PlayMessage" OnEdit=SelectMessage OnDelete=DeleteMessage />
            }
            @if (!Messages.Any())
            {
                <aside>
                    --- Start the conversation by typing or speaking below. ---
                </aside>
            }
        </div>
    }
    <NewMessage Room="Room" SelectedMessage="SelectedMessage" OnDoneEditing=DoneEditing />
</div>

@code {
    [Parameter] public GetRoomResponse Room { get; set; } = null!;
    [Parameter] public UserAvatar? User { get; set; }
    [Parameter] public string? Language { get; set; }

    List<Message>? Messages;
    Message? SelectedMessage;
    bool HasNewMessage;
    string? PlayMessage;

    protected override async Task OnInitializedAsync()
    {
        await GetMessagesAsync(new());
        On<UserLanguageChanged>(GetMessagesAsync);
        HasNewMessage = true;
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (HasNewMessage)
        {
            await JS.InvokeVoidAsync("scrollToBottom", $"room-{Room.RoomId}");
            HasNewMessage = false;
        }
    }

    async Task GetMessagesAsync(UserLanguageChanged evt)
    {
        if (Messages != null)
            Messages.Clear();
        
        await InvokeAsync(StateHasChanged);

        var response = await Api.GetAllContentAsync(new GetAllContentRequest { RoomSlug = Room.RoomId });
        Messages = response.Content.ToList();
        if (Language != response.Language)
        {
            await Hub.InvokeAsync("StopWatching", Room.RoomId + "|" + Language);
            Language = response.Language;
        }

        var subscriptionId = Room.RoomId + "|" + Language;
        await On<MessageTextChanged>(subscriptionId, x =>
        {
            UpdateMessage(x.Message);
        });

        await On<MessageAudioChanged>(subscriptionId, x =>
        {
            UpdateMessage(x.Message);
        });
        await On<MessageDeleted>(subscriptionId, x => RemoveMessage(x.Message));
    }

    void SelectMessage(Message message) => SelectedMessage = message;
    void DoneEditing(Message? editedMessage) 
    {
        if (editedMessage != null)
            UpdateMessage(editedMessage);

        SelectedMessage = null;
    }

    void UpdateMessage(Message message)
    {
        SelectedMessage = null;

        var existingId = Messages.FindIndex(x => 
           x.Id == message.Id 
        || x.Id == message.SourceMessageId
        || message.Id == x.SourceMessageId
        || (message.SourceMessageId != null && x.SourceMessageId == message.SourceMessageId));
        if (existingId > -1)
        {
            Messages[existingId] = message;
        }
        else
        {
            Messages.Add(message);
            HasNewMessage = true;
            PlayMessage = message.Id;
            Console.WriteLine($"HasNewMessage {PlayMessage}");
        }
    }

    void RemoveMessage(Message message)
    {
        var existing = Messages.Find(x => x.Id == message.Id);
        if (existing != null)
        {
            existing.DeletedDate = message.DeletedDate;
            StateHasChanged();
        }
    }

    async Task DeleteMessage(Message message)
    {
        await Api.DeleteMessageAsync(new DeleteMessageRequest { RoomId = Room.RoomId, MessageId = message.Id });
    }

    protected void On<T>(Func<T, Task> action)
    {
        if (Hub != null)
        {
            Hub.On(typeof(T)!.Name, async delegate (T evt)
            {
                await action(evt);
                await InvokeAsync(StateHasChanged);
            });
        }
    }
}
