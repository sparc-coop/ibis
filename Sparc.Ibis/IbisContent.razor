@using System.Web
@using Microsoft.JSInterop;
@implements IDisposable

<article lang="@_language" class="ibis-content @ChannelId">
    <aside class="ibis-widget">
        <IbisLanguageSelector SelectedLanguage="@_language" OnLanguageSelected="ChangeMessageLanguage" />
        <IbisAudioPlayer Message="LocalMessage" />
        <figure>
            <img src="https://ibis.chat/images/logo_icon.png" alt="Ibis logo" />
            <figcaption>Ibis</figcaption>
        </figure>
    </aside>

    @if (ChildContent == null)
    {
        @if(Me?.LanguageIsRTL == false)
        {
            <div class="message-text">
                @((MarkupString)LocalMessage.Html)
            </div>
        } else
        {
            <div class="message-text" dir="rtl">
                @((MarkupString)LocalMessage.Html)
            </div>
        }
    }
    else
    {
        @if (Me?.LanguageIsRTL == false)
        {
            <section id="@_id" class="ibis-translate">
                @ChildContent
            </section>
        } else
        {
            <section id="@_id" class="ibis-translate" dir="rtl">
                @ChildContent
            </section>
        }
    }
</article>


@inject PersistentComponentState PersistedState

@code {
    [Parameter] public Message? Message { get; set; }
    [Parameter] public string? ChannelId { get; set; }
    [Parameter] public string? Tag { get; set; }
    [Parameter] public RenderFragment? ChildContent { get; set; }
    [CascadingParameter] public UserAvatar? Me { get; set; }

    string? _originalMessageId;
    Message LocalMessage = new();

    string? _language;
    string _id = $"ibis-{Guid.NewGuid()}";

    PersistingComponentStateSubscription PersistedStateSubscription;

    protected override async Task OnInitializedAsync()
    {
        if (Message != null)
        {
            LocalMessage = Message;
        }
        else if (ChannelId != null && Tag != null)
        {
            LocalMessage = await Api.GetMessageAsync(new GetMessageRequest { RoomSlug = Message.RoomId, Tag = Tag });
        }

        _originalMessageId = LocalMessage?.Id;
        _language = LocalMessage?.Language;
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (!firstRender)
        {
            return;
        }

        PersistedStateSubscription = PersistedState.RegisterOnPersisting(PersistData);
        await InitFromClientAsync(_language);
    }

    async Task InitFromClientAsync(string? language, bool forceLoad = false)
    {
        if (ChildContent == null || ChannelId == null)
            return;

        if (!forceLoad && PersistedState.TryTakeFromJson<List<Message>>(ChannelId, out var restoredIbisContent))
        {
            _language = await Ibis.InitAsync(ChannelId, language, restoredIbisContent);
        }
        else
        {
            _language = await Ibis.InitAsync(ChannelId, language);
        }

        await Ibis.InitClientAsync(this, _id);
        StateHasChanged();
    }

    async Task ChangeMessageLanguage(Language language)
    {
        if (ChildContent != null && language.Id != _language)
        {
            await InitFromClientAsync(language.Id, true);
        }
        else if (_originalMessageId != null && language.Id != LocalMessage.Language)
        {
            LocalMessage = await Api.GetMessageAsync(new GetMessageRequest { RoomSlug = LocalMessage.RoomId, Tag = _originalMessageId, Language = language.Id });
            _language = LocalMessage?.Language;
        }
    }

    

    [JSInvokable]
    public async Task<List<string>> TranslateAsync(List<string> text)
    {
        return await Ibis.TranslateAsync(text, ChannelId!);
    }

    Task PersistData()
    {
        if (ChannelId != null)
            PersistedState.PersistAsJson(ChannelId, Ibis.Content);
        
        return Task.CompletedTask;
    }

    public void Dispose()
    {
        PersistedStateSubscription.Dispose();
    }
}
