@implements IDisposable
@using Microsoft.JSInterop;

<section id="@_id" lang="@_language" class="ibis-translate">
    @ChildContent

    <aside class="ibis-widget">
        
    </aside>
</section>

@inject IbisTranslator Ibis
@inject PersistentComponentState PersistedState

@code {
    [Parameter] public string ChannelId { get; set; } = null!;
    [Parameter] public string? Language { get; set; }
    [Parameter] public RenderFragment ChildContent { get; set; } = null!;
    [Parameter] public bool AsHtml { get; set; }

    string? _language;
    string _id = $"ibis-{Guid.NewGuid()}";

    PersistingComponentStateSubscription PersistedStateSubscription;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (!firstRender)
        {
            return;
        }

        PersistedStateSubscription = PersistedState.RegisterOnPersisting(PersistData);

        if (PersistedState.TryTakeFromJson<List<Message>>(ChannelId, out var restoredIbisContent))
        {
            _language = await Ibis.InitAsync(ChannelId, Language, AsHtml, restoredIbisContent);
        }
        else
        {
            _language = await Ibis.InitAsync(ChannelId, Language, AsHtml);
        }

        await Ibis.InitClientAsync(this, _id);
    }

    [JSInvokable]
    public async Task<List<string>> TranslateAsync(List<string> text)
    {
        return await Ibis.TranslateAsync(text, ChannelId);
    }

    Task PersistData()
    {
        PersistedState.PersistAsJson(ChannelId, Ibis.Content);
        return Task.CompletedTask;
    }

    void IDisposable.Dispose()
    {
        PersistedStateSubscription.Dispose();
    }
}
