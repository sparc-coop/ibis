@page "/content/{RoomId}/{Id}"
@page "/content/{RoomId}/new"
@using PSC.Blazor.Components.MarkdownEditor;

<div class="message-page">
    <button class="expand-toolbox-btn-icon @(IsExpanded ? "expanded" : "")" @onclick="ExpandClicked"><DoubleExpandIcon /></button>
    <form class="new-message editing" @onsubmit=Save>
        <div class="tag-content-container">
            <h3>Textfield</h3>
            <textarea class="tag-textarea" @bind="@SelectedMessage.Tag"></textarea>
        </div>

        @if (SelectedMessage.Text != null)
        {
            <div class="MarkdownEditorComponent" aria-label="Message">
                <h3>Content</h3>
                <MarkdownEditor @bind-Value="@SelectedMessage.Text" ValueHTMLChanged="UpdateContent" />
            </div>
        }

        <div class="send">
            <button type="button" class="cancel" @onclick=GoBack>
                Cancel
            </button>
            <div class="btn-and-msg">
                <div class="confirmation-message" style="display: @(ShowConfirmation ? "flex" : "none")">
                    <p>Saved!</p>
                </div>
                <button class="save-update-btn" type="submit" aria-label="Send">
                    <span>Save</span>
                </button>
            </div>
        </div>

        <footer>
        </footer>
    </form>
</div>

@code {
    [Parameter] public string Id { get; set; } = null!;
    [Parameter] public string RoomId { get; set; } = null!;
    [Parameter] public Message SelectedMessage { get; set; } = new Message() { Text = string.Empty };
    [Parameter] public EventCallback<bool> OnExpandClicked { get; set; }
    // Message Content = new() { Text = string.Empty };
    bool IsBlog;
    bool ShowConfirmation = false;
    private bool IsExpanded = false;

    // protected override async Task OnInitializedAsync()
    // {
    //     Content = Id != null
    //     ? await Api.GetMessageAsync(new GetMessageRequest { RoomSlug = RoomId, Tag = Id })
    //     : new Message { RoomId = RoomId };
    //     IsBlog = Content.Type == "blog";
    //     Content.Html = Markdig.Markdown.ToHtml(Content.Text ?? string.Empty);
    //     Console.WriteLine(Content.Text);
    // }

    protected override async Task OnInitializedAsync()
    {
        if (Id != null)
        {
            SelectedMessage = await Api.GetMessageAsync(new GetMessageRequest { RoomSlug = RoomId, Tag = Id });
        }
        else
        {
            SelectedMessage = new Message { RoomId = RoomId };
        }

        IsBlog = SelectedMessage.Type == "blog";
        SelectedMessage.Html = Markdig.Markdown.ToHtml(SelectedMessage.Text ?? string.Empty);
    }

    void GoBack()
    {
        Nav.NavigateTo($"/rooms/{RoomId}");
    }

    async Task Delete()
    {
        await Api.DeleteMessageAsync(new DeleteMessageRequest { RoomId = RoomId, MessageId = SelectedMessage.Id });
        GoBack();
    }

    void UpdateContent(string value)
    {
        SelectedMessage!.Html = value;
    }

    async Task Save()
    {
        if (IsBlog)
            SelectedMessage!.Type = "blog";

        await Api.TypeMessageAsync(new TypeMessageRequest
            {
                RoomId = RoomId,
                MessageId = SelectedMessage!.Id,
                Type = SelectedMessage.Type,
                Text = SelectedMessage.Text
            });

        ShowConfirmation = true;
        StateHasChanged();
        await Task.Delay(3000);
        ShowConfirmation = false;
        StateHasChanged();
    }

    private async Task ExpandClicked()
    {
        IsExpanded = !IsExpanded;
        await OnExpandClicked.InvokeAsync(IsExpanded);
    }
}